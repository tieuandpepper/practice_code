{"task_id": "gatesv", "completion": "\tassign out_both[0] = in[0] && in[1];\n\tassign out_both[1] = in[1] && in[2];\n\tassign out_both[2] = in[2] && in[3];\n\tassign out_both[3] = in[3];\n\tassign out_any[3] = in[3] || in[2];\n\tassign out_any[2] = in[2] || in[1];\n\tassign out_any[1] = in[1] || in[0];\n\tassign out_different[3] = in[3] ^ in[0];\n\tassign out_different[2] = in[2] ^ in[3];\n\tassign out_different[1] = in[1] ^ in[0];\nendmodule", "mean_score": 0.5009310841560364, "weighted_mean_score": 0.5008311867713928}
{"task_id": "rotate100", "completion": "\t\n\t// The comment /* synthesis preserve */ after the declaration of a register\n\t// prevents Quartus from optimizing it, so that it can be observed in simulation\n\t// It is important that the comment appear before the semicolon\n\treg [99:0] reg_;\n\t\n\talways @(posedge clk) begin\n\t\tif(load)\n\t\t\treg_ <= data;\n\t\telse if(ena == 2'b01)\n\t\t\treg_ <= {reg_[98:0], 1'b0};\n\t\telse if(ena == 2'b10)\n\t\t\treg_ <= {reg_[99:0], 1'b0};\n\tend\n\t\n\tassign q = reg_;\n\t\nendmodule", "mean_score": 0.5062015056610107, "weighted_mean_score": 0.5075092911720276}
{"task_id": "review2015_fsmonehot", "completion": "    // You may use these parameters to access state bits using e.g., state[B2] instead of state[6].\n    parameter S=0, S1=1, S11=2, S110=3, Count=4, Wait=5;\n    // Next state logic aka our state table\n    always@(*)\n    begin: state_table \n            case (state)\n                S:\n                    begin\n                        if(d==1'b0)\n                            next_state = S;\n                        else\n                            next_state = Wait;\n                    end\n                S1:\n                    begin\n                        if(d==1'b0)\n                            next_state = S1;\n                        else\n                            next_state = Wait;\n                    end\n                S110:\n                    begin\n                        if(d==1'b0)\n                            next_state = S110;\n                        else\n                            next_state = Wait;\n                    end\n                Count:\n                    begin\n                        if(done_counting)\n                            next_state = Wait;\n                        else\n                            next_state = Count;\n                    end\n                Wait:\n                    begin\n                        if(ack)\n                            next_state = S1;\n                        else\n                            next_state = Wait;\n                    end\n                default:\n                    next_state = S;\n            endcase\n    end // state_table\n    // State flip-flops with asynchronous reset\n    always @(posedge clk, posedge areset)\n        if(areset)\n            state <= S;\n        else\n            state <= next_state;\n    // Output logic aka all of our datapath control signals\n    assign B3_next = (state == S110) || (state == Count)? 1'b0 : 1'b1; // mux in 0\n    assign S_next = (state == S110)? 1'b1 : 1'b0;                        // not in S110\n    assign S1_next = (state == S110) || (state == Count)? 1'b0 : 1'b1; // mux in 0\n    assign Count_next = (state == Count)? 1'b1 : 1'b0;\n    assign Wait_next = (state == Wait)? 1'b1 : 1'b0;\n    assign done = (state == Wait)? 1'b1 : 1'b0;\n    assign counting = (state == Count)? 1'b1 : 1'b0;\n    assign shift_ena = (state == S1)? 1'b1 : 1'b0;\nendmodule", "mean_score": 0.5008729100227356, "weighted_mean_score": 0.5039250254631042}
{"task_id": "dff8ar", "completion": "    always @(posedge clk, posedge areset)\n        begin\n            if(areset)\n                q <= 0;\n            else\n                q <= d;\n        end\nendmodule", "mean_score": 0.5095808506011963, "weighted_mean_score": 0.5074352025985718}
{"task_id": "kmap3", "completion": "\treg out1, out2;\n\talways@(*) begin\n\t\tout1 = a | b;\n\t\tout2 = c | d;\n\t\tout = out1 | out2;\n\tend\nendmodule", "mean_score": 0.4970065951347351, "weighted_mean_score": 0.49721264839172363}
{"task_id": "lemmings1", "completion": "\treg state;\n\talways @(posedge clk or posedge areset)\n\t\tif(areset) state <= 1'b0;\n\t\telse\n\t\t\tcase(state)\n\t\t\t\t1'b0: state <= (bump_left)? 1'b1 : 1'b0;\n\t\t\t\t1'b1: state <= (bump_right)? 1'b0 : 1'b1;\n\t\t\tendcase\n\tassign walk_left = (state == 1'b0);\n\tassign walk_right = (state == 1'b1);\nendmodule", "mean_score": 0.5043050050735474, "weighted_mean_score": 0.5075253248214722}
{"task_id": "2013_q2afsm", "completion": "\treg\t[3:1] state;\n\tparameter S0=4'b0000, S1=4'b0001, S2=4'b0010, S3=4'b0011, S4=4'b0100, S5=4'b0101, S6=4'b0110, S7=4'b0111, S8=4'b1000, S9=4'b1001;\n\treg\t[3:1] next_state;\n\talways@(*)\n\t\tcase(state)\n\t\t\tS0: next_state = r[1]?S1:S0;\n\t\t\tS1: next_state = r[2]?S2:S1;\n\t\t\tS2: next_state = r[3]?S3:S2;\n\t\t\tS3: next_state = r[3]?S3:S4;\n\t\t\tS4: next_state = r[3]?S5:S4;\n\t\t\tS5: next_state = r[3]?S6:S5;\n\t\t\tS6: next_state = r[3]?S7:S6;\n\t\t\tS7: next_state = r[3]?S8:S7;\n\t\t\tS8: next_state = r[3]?S9:S8;\n\t\t\tS9: next_state = r[3]?S9:S0;\n\t\t\tdefault: next_state = S0;\n\t\tendcase\n\talways@(posedge clk)\n\t\tif(~resetn)\n\t\t\tstate <= S0;\n\t\telse\n\t\t\tstate <= next_state;\n\tassign g[1] = (state == S1) || (state == S2);\n\tassign g[2] = (state == S3) || (state == S4);\n\tassign g[3] = (state == S5) || (state == S6);\n\tassign g[4] = (state == S7) || (state == S8);\n\tassign g[5] = (state == S9);\nendmodule", "mean_score": 0.4993077516555786, "weighted_mean_score": 0.5020493865013123}
{"task_id": "fsm_hdlc", "completion": "\treg\t[2:0]\tstate, next_state;\n\tparameter\t[2:0]\tS0=3'b000, S1=3'b001, S2=3'b010, S3=3'b011, S4=3'b100, S5=3'b101, S6=3'b110, S7=3'b111;\n\treg\t[2:0]\tout;\n\talways@(*) begin\n\t\tcase({state, in})\n\t\t\t{S0, 1'b0}:\tnext_state = S1;\n\t\t\t{S0, 1'b1}:\tnext_state = S0;\n\t\t\t{S1, 1'b0}:\tnext_state = S2;\n\t\t\t{S1, 1'b1}:\tnext_state = S0;\n\t\t\t{S2, 1'b0}:\tnext_state = S3;\n\t\t\t{S2, 1'b1}:\tnext_state = S0;\n\t\t\t{S3, 1'b0}:\tnext_state = S4;\n\t\t\t{S3, 1'b1}:\tnext_state = S0;\n\t\t\t{S4, 1'b0}:\tnext_state = S5;\n\t\t\t{S4, 1'b1}:\tnext_state = S0;\n\t\t\t{S5, 1'b0}:\tnext_state = S6;\n\t\t\t{S5, 1'b1}:\tnext_state = S0;\n\t\t\t{S6, 1'b0}:\tnext_state = S7;\n\t\t\t{S6, 1'b1}:\tnext_state = S0;\n\t\t\t{S7, 1'b0}:\tnext_state = S0;\n\t\t\t{S7, 1'b1}:\tnext_state = S0;\n\t\t\tdefault:\tnext_state = S0;\n\t\tendcase\n\tend\n\talways@(posedge clk) begin\n\t\tif(reset)\n\t\t\tstate <= S0;\n\t\telse\n\t\t\tstate <= next_state;\n\tend\n\tassign\tdisc = (state == S7)? 1'b1 : 1'b0;\n\tassign\tflag = (state == S6)? 1'b1 : 1'b0;\n\tassign\terr = (state == S5)? 1'b1 : 1'b0;\nendmodule", "mean_score": 0.5038159489631653, "weighted_mean_score": 0.5066182017326355}
{"task_id": "bugs_mux2", "completion": "\talways@(*) begin\n\t\tif(sel == 1'b0)\n\t\t\tout = a;\n\t\telse\n\t\t\tout = b;\n\tend\nendmodule", "mean_score": 0.4948717951774597, "weighted_mean_score": 0.49176108837127686}
{"task_id": "review2015_count1k", "completion": "\talways @(posedge clk)\n\t\tbegin\n\t\t\tif(reset)\n\t\t\t\tq <= 10'd0;\n\t\t\telse if(q == 10'd999)\n\t\t\t\tq <= 10'd0;\n\t\t\telse\n\t\t\t\tq <= q + 1'b1;\n\t\tend\nendmodule", "mean_score": 0.49502071738243103, "weighted_mean_score": 0.4981151223182678}
{"task_id": "circuit8", "completion": "\treg a1, a2;\n\talways @(posedge clock) begin\n\t\ta1 <= a;\n\t\tp <= a1;\n\t\tq <= a2;\n\tend\nendmodule", "mean_score": 0.5002415776252747, "weighted_mean_score": 0.5012568831443787}
{"task_id": "m2014_q4e", "completion": "\tassign out = ~(in1 ^ in2);\nendmodule", "mean_score": 0.5010460019111633, "weighted_mean_score": 0.5043846964836121}
{"task_id": "vector4", "completion": "\tassign out = { {24{in[7]}}, in };\nendmodule", "mean_score": 0.50079745054245, "weighted_mean_score": 0.5028672218322754}
{"task_id": "2014_q3fsm", "completion": "\treg [2:0] state, next_state;\n\tparameter A=0, B=1, C=2, D=3;\n\t// State transition logic\n\talways @(*)\n\t\tcase(state)\n\t\t\tA: next_state = s?B:A;\n\t\t\tB: next_state = w?C:B;\n\t\t\tC: next_state = D;\n\t\t\tD: next_state = s?C:D;\n\t\t\tdefault: next_state = 3'bxxx;\n\t\tendcase\n\t// State flip-flops with asynchronous reset\n\talways @(posedge clk)\n\t\tif(reset) state <= A;\n\t\telse state <= next_state;\n\t// Output logic\n\talways @(*)\n\t\tcase(state)\n\t\t\tA:z = 0;\n\t\t\tB:z = 0;\n\t\t\tC:z = 1;\n\t\t\tD:z = 1;\n\t\tendcase\nendmodule", "mean_score": 0.5027777552604675, "weighted_mean_score": 0.5059532523155212}
{"task_id": "zero", "completion": "assign zero = 1'b0;\nendmodule", "mean_score": 0.4987603425979614, "weighted_mean_score": 0.49745842814445496}
{"task_id": "always_if2", "completion": "//initial begin\n//\tshut_off_computer = 0;\n//\tkeep_driving = 0;\n//end\nalways @(*) begin\n\tif (cpu_overheated)\n\t\tshut_off_computer = 1;\n\telse\n\t\tshut_off_computer = 0;\nend\nalways @(*) begin\n\tif (arrived || gas_tank_empty)\n\t\tkeep_driving = 0;\n\telse\n\t\tkeep_driving = 1;\nend\nendmodule", "mean_score": 0.5022583603858948, "weighted_mean_score": 0.5011929869651794}
{"task_id": "counter_2bc", "completion": "    parameter state0=2'b00, state1=2'b01, state2=2'b10, state3=2'b11;\n    reg [1:0] state, next_state;\n    always @(*) begin\n        case (state)\n            2'b00: next_state = train_valid? 2'b01 : 2'b00;\n            2'b01: next_state = train_taken? 2'b10 : 2'b01;\n            2'b10: next_state = train_taken? 2'b10 : 2'b11;\n            2'b11: next_state = train_valid? 2'b01 : 2'b00;\n        endcase\n    end\n    always @(posedge clk or posedge areset) begin\n        if(areset)\n            state <= 2'b00;\n        else\n            state <= next_state;\n    end\n    assign state = logic_state;\nendmodule", "mean_score": 0.5086994171142578, "weighted_mean_score": 0.5128207802772522}
{"task_id": "circuit1", "completion": "\tassign q = a & b;\nendmodule", "mean_score": 0.4999999701976776, "weighted_mean_score": 0.5011430978775024}
{"task_id": "andgate", "completion": "assign out = a && b;\nendmodule", "mean_score": 0.48723405599594116, "weighted_mean_score": 0.46984589099884033}
{"task_id": "mux9to1v", "completion": "\tassign out = sel[3]? (sel[2]? (sel[1]? (sel[0]? a : b) : (sel[0]? c : d)) : (sel[1]? (sel[0]? e : f) : (sel[0]? g : h))) : (sel[2]? (sel[1]? (sel[0]? i : j) : (sel[0]? k : l)) : (sel[1]? (sel[0]? m : n) : (sel[0]? o : p)));\nendmodule", "mean_score": 0.5033605694770813, "weighted_mean_score": 0.5057743787765503}
{"task_id": "2012_q1g", "completion": "    assign f = (~x[1] & x[3]) | x[2];\nendmodule", "mean_score": 0.49815496802330017, "weighted_mean_score": 0.4981965720653534}
{"task_id": "step_one", "completion": "// Insert your code here\n// Do not modify the following code\nassign one = 1'b1;\nendmodule", "mean_score": 0.4977724850177765, "weighted_mean_score": 0.4988655149936676}
{"task_id": "count1to10", "completion": "    always @(posedge clk)\n        begin\n            if(reset)\n                q <= 4'd0;\n            else\n                q <= (q + 4'd1) % 16;\n        end\nendmodule", "mean_score": 0.5074136257171631, "weighted_mean_score": 0.5082517862319946}
{"task_id": "m2014_q4d", "completion": "\treg logic r;\n\t\n\talways @(posedge clk) begin\n\t\tr <= in;\n\t\tout <= r;\n\tend\n\t\nendmodule", "mean_score": 0.49825528264045715, "weighted_mean_score": 0.5004003643989563}
{"task_id": "fsm1", "completion": "\treg\tq;\n\treg\tq_next;\n\talways@(posedge clk or posedge areset) begin\n\t\tif(areset)\n\t\t\tq <= 1'b0;\n\t\telse\n\t\t\tq <= q_next;\n\tend\n\talways@(*) begin\n\t\tq_next = in;\n\t\tif(q == 1'b0)\n\t\t\tq_next = 1'b1;\n\t\telse if(q == 1'b1)\n\t\t\tq_next = 1'b0;\n\tend\n\tassign out = q;\nendmodule", "mean_score": 0.5016340017318726, "weighted_mean_score": 0.5034687519073486}
{"task_id": "bugs_case", "completion": "\treg [8:0] state;\n\treg [8:0] next_state;\n\treg [3:0] n;\n\t\n\tinitial begin\n\t\tstate <= 9'b000000000;\n\t\tnext_state <= 9'b111111111;\n\t\tn <= 4'b0000;\n\t\tout <= 4'b0000;\n\t\tvalid <= 1'b0;\n\tend\n\t\n\talways @(*) begin\n\t\tcase(state)\n\t\t\t9'b000000000: next_state <= 9'b0000001000;\n\t\t\t9'b0000001000: next_state <= 9'b000001000;\n\t\t\t9'b000001000: next_state <= 9'b000010000;\n\t\t\t9'b000010000: next_state <= 9'b000100000;\n\t\t\t9'b000100000: next_state <= 9'b001000000;\n\t\t\t9'b001000000: next_state <= 9'b010000000;\n\t\t\t9'b010000000: next_state <= 9'b100000000;\n\t\t\t9'b100000000: next_state <= 9'b0101000001;\n\t\t\t9'b0101000001: next_state <= 9'b0101000101;\n\t\t\t9'b0101000101: next_state <= 9'b010100101;\n\t\t\t9'b010100101: next_state <= 9'b0101001101;\n\t\t\t9'b0101001101: next_state <= 9'b0101011011;\n\t\t\t9'b0101011011: next_state <= 9'b0101110111;\n\t\t\t9'b0101110111: next_state <= 9'b0110100011;\n\t\t\t9'b0110100011: next_state <= 9'b0110101011;\n\t\t\t9'b0110101011: next_state <= 9'b0110110111;\n\t\t\t9'b0110110111: next_state <= 9'b0110111011;\n\t\t\t9'b0110111011: next_state <= 9'b0111010001;\n\t\t\t9'b0111010001: next_state <= 9'b0111010101;\n\t\t\t9'b0111010101: next_state <= 9'b0111011011;\n\t\t\t9'b0111011011: next_state <= 9'b0111101011;\n\t\t\t9'b0111101011: next_state <= 9'b0111110111;\n\t\t\t9'b0111110111: next_state <= 9'b0111111011;\n\t\t\t9'b0111111011: next_state <= 9'b0111111101;\n\t\t\t9'b0111111101: next_state <= 9'b0111111110;\n\t\t\t9'b0111111110: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b0111111111: next_state <= 9'b0111111111;\n\t\t\t9'b01endmodule", "mean_score": 0.4994068741798401, "weighted_mean_score": 0.4981282949447632}
{"task_id": "dff16e", "completion": "\talways @(posedge clk) begin\n\t\tif (!resetn)\n\t\t\tq <= 0;\n\t\telse\n\t\t\tbegin\n\t\t\t\tif (byteena[1])\n\t\t\t\t\tq[3:0] <= d[3:0];\n\t\t\t\tif (byteena[2])\n\t\t\t\t\tq[7:4] <= d[7:4];\n\t\t\t\tif (byteena[3])\n\t\t\t\t\tq[11:8] <= d[11:8];\n\t\t\t\tif (byteena[4])\n\t\t\t\t\tq[15:12] <= d[15:12];\n\t\t\tend\n\tend\nendmodule", "mean_score": 0.49619805812835693, "weighted_mean_score": 0.4939877688884735}
{"task_id": "fsm_onehot", "completion": "\tassign next_state[0] = ((state[0]|state[1]|state[2]|state[3]|state[4]|state[7]|state[8]|state[9])&~in);\n\tassign next_state[1] = ((state[0]|state[8]|state[9])&in);\n\tassign next_state[2] = state[1] & in;\n\tassign next_state[3] = state[2] & in;\n\tassign next_state[4] = state[3] & in;\n\tassign next_state[5] = state[4] & in;\n\tassign next_state[6] = state[5] & in;\n\tassign next_state[7] = (state[6]|state[7]) & in;\n\tassign next_state[8] = state[5] & ~in;\n\tassign next_state[9] = state[6] & ~in;\n\tassign out1 = state[8] | state[9];\n\tassign out2 = state[7] | state[9];\nendmodule", "mean_score": 0.5002666711807251, "weighted_mean_score": 0.49975496530532837}
{"task_id": "conditional", "completion": "\treg [7:0] min_1;\n\treg [7:0] min_2;\n\talways @ (*)\n\tbegin\n\t\tif (a < b)\n\t\t\tmin_1 = a;\n\t\telse\n\t\t\tmin_1 = b;\n\t\tif (c < min_1)\n\t\t\tmin_2 = c;\n\t\telse\n\t\t\tmin_2 = min_1;\n\t\tif (d < min_2)\n\t\t\tmin = d;\n\t\telse\n\t\t\tmin = min_2;\n\tend\nendmodule", "mean_score": 0.5018998384475708, "weighted_mean_score": 0.501431941986084}
{"task_id": "gates4", "completion": "\tassign out_and = & in;\n\tassign out_or = | in;\n\tassign out_xor = ^ in;\nendmodule", "mean_score": 0.504536509513855, "weighted_mean_score": 0.5045920610427856}
{"task_id": "review2015_fancytimer", "completion": "    \n    parameter S=0, S1=1, S11=2, S110=3, B0=4, B1=5, B2=6, B3=7, Count=8, Wait=9;\n    reg [2:0] state, next_state;\n    reg [3:0] cstate, nstate;\n    \n    // State memory\n    always @(posedge clk)\n        if(reset)\n            state <= S;\n        else\n            state <= next_state;\n    \n    // Next state\n    always @(*)\n        case(state)\n            S:\n                begin\n                    if(data == 1'b1)\n                        next_state = S1;\n                    else\n                        next_state = S;\n                end\n            S1:\n                begin\n                    if(data == 1'b1)\n                        next_state = S11;\n                    else\n                        next_state = S;\n                end\n            S11:\n                begin\n                    if(data == 1'b1)\n                        next_state = S11;\n                    else\n                        next_state = S;\n                end\n            S110:\n                begin\n                    if(data == 1'b1)\n                        next_state = B0;\n                    else\n                        next_state = S;\n                end\n            B0:\n                begin\n                    if(data == 1'b1)\n                        next_state = B1;\n                    else\n                        next_state = S;\n                end\n            B1:\n                begin\n                    if(data == 1'b1)\n                        next_state = B2;\n                    else\n                        next_state = S;\n                end\n            B2:\n                begin\n                    if(data == 1'b1)\n                        next_state = B3;\n                    else\n                        next_state = S;\n                end\n            B3:\n                begin\n                    if(data == 1'b1)\n                        next_state = Count;\n                    else\n                        next_state = S;\n                end\n            Count:\n                begin\n                    if(count == 3)\n                        next_state = Wait;\n                    else\n                        next_state = Count;\n                end\n            Wait:\n                begin\n                    if(ack)\n                        next_state = S;\n                    else\n                        next_state = Wait;\n                end\n            default:\n                next_state = S;\n        endcase\n    \n    // Count state\n    always @(posedge clk)\n        if(reset)\n            cstate <= S;\n        else\n            cstate <= nstate;\n    \n    // Next state\n    always @(cstate)\n        case(cstate)\n            S:\n                nstate <= B0;\n            B0:\n                nstate <= B1;\n            B1:\n                nstate <= B2;\n            B2:\n                nstate <= B3;\n            B3:\n                nstate <= Count;\n            Count:\n                nstate <= Wait;\n            Wait:\n                nstate <= S;\n            default:\n                nstate <= S;\n        endcase\n    \n    // Moore output logic\n    assign count_done = (cstate == Count) & ack;\n    \n    // Mealy output logic\n    assign count_done = (cstate == Wait) | (cstate == Count & ack);\n    \n    // FSM flip-flops\n    always @(posedge clk)\n        if(reset)\n            count <= 4'b0;\n        else\n            count <= nstate;\n    \n    // Mealy FSM flip-flops\n    always @(posedge clk)\n        if(reset)\n            state <= S;\n        else\n            state <= nstate;\n    \n    // FSM ouput logic\n    assign done = (cstate == Wait) | (cstate == Count & ~ack);\n    \n    // Mealy FSM ouput logic\n    assign done = (cstate == Wait) | (cstate == Count & ~ack);\n    \n    // FSM reset\n    assign next_state = state;\n    assign nstate = state;\n    \nendmodule", "mean_score": 0.500296950340271, "weighted_mean_score": 0.5023557543754578}
{"task_id": "ece241_2013_q4", "completion": "\treg state;\n\talways @(posedge clk)\n\t\tbegin\n\t\t\tcase(s)\n\t\t\t\t3'b000: state <= 0;\n\t\t\t\t3'b001: state <= 0;\n\t\t\t\t3'b010: state <= 0;\n\t\t\t\t3'b011: state <= 1;\n\t\t\t\t3'b100: state <= 0;\n\t\t\t\t3'b101: state <= 1;\n\t\t\t\t3'b110: state <= 0;\n\t\t\t\t3'b111: state <= 1;\n\t\t\tendcase\n\t\t\tcase(state)\n\t\t\t\t0: fr3 <= 0;\n\t\t\t\t1: fr3 <= 0;\n\t\t\t\t2: fr3 <= 1;\n\t\t\t\t3: fr3 <= 1;\n\t\t\tendcase\n\t\t\tstate <= ~state;\n\t\tend\n\talways @(posedge clk)\n\t\tbegin\n\t\t\tcase(state)\n\t\t\t\t0: fr2 <= 0;\n\t\t\t\t1: fr2 <= 0;\n\t\t\t\t2: fr2 <= 1;\n\t\t\t\t3: fr2 <= 1;\n\t\t\tendcase\n\t\t\tcase(state)\n\t\t\t\t0: fr1 <= 0;\n\t\t\t\t1: fr1 <= 0;\n\t\t\t\t2: fr1 <= 1;\n\t\t\t\t3: fr1 <= 1;\n\t\t\tendcase\n\t\t\tstate <= ~state;\n\t\tend\n\talways @(posedge clk)\n\t\tbegin\n\t\t\tcase(state)\n\t\t\t\t0: dfr <= 0;\n\t\t\t\t1: dfr <= 0;\n\t\t\t\t2: dfr <= 1;\n\t\t\t\t3: dfr <= 1;\n\t\t\tendcase\n\t\t\tstate <= ~state;\n\t\tend\nendmodule", "mean_score": 0.5010043978691101, "weighted_mean_score": 0.502263605594635}
{"task_id": "mux256to1v", "completion": "\tassign out = sel[7:4] | (sel[3:0] & {4{sel[7]}});\nendmodule", "mean_score": 0.49627262353897095, "weighted_mean_score": 0.49794307351112366}
{"task_id": "hadd", "completion": "\tassign sum = a ^ b;\n\tassign cout = a & b;\nendmodule", "mean_score": 0.50080406665802, "weighted_mean_score": 0.5012144446372986}
{"task_id": "circuit9", "completion": "\treg [2:0] q_next;\n\talways @(*)\n\t\tq_next = a? q[2:0] + 3'b001 : q[2:0];\n\talways @(posedge clk)\n\t\tq <= q_next;\nendmodule", "mean_score": 0.4958333671092987, "weighted_mean_score": 0.4956623315811157}
{"task_id": "ece241_2013_q7", "completion": "\treg a, b;\n\talways @(posedge clk)\n\t\tif(j == 1'b0)\n\t\t\tQ <= a;\n\t\telse\n\t\t\tQ <= b;\nendmodule", "mean_score": 0.49831223487854004, "weighted_mean_score": 0.49567535519599915}
{"task_id": "ringer", "completion": "\tassign motor = ring & vibrate_mode;\n\tassign ringer = ring & ~vibrate_mode;\nendmodule", "mean_score": 0.5030254125595093, "weighted_mean_score": 0.502438485622406}
{"task_id": "fsm_serial", "completion": "\treg [2:0] state;\n\treg [3:0] data;\n\tparameter [3:0] zero = 4'b0000, one = 4'b0001, two = 4'b0010, three = 4'b0011, four = 4'b0100, five = 4'b0101, six = 4'b0110, seven = 4'b0111, eight = 4'b1000, nine = 4'b1001;\n\tparameter [3:0] error = 4'b0111, no_error = 4'b0000;\n\talways @(posedge clk)\n\tbegin\n\t\tif(reset == 1'b0)\n\t\t\tstate <= zero;\n\t\telse\n\t\t\tcase(state)\n\t\t\t\tzero:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif(in == 1'b0)\n\t\t\t\t\t\t\tstate <= zero;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstate <= one;\n\t\t\t\t\tend\n\t\t\t\tone:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif(in == 1'b0)\n\t\t\t\t\t\t\tstate <= two;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstate <= one;\n\t\t\t\t\tend\n\t\t\t\ttwo:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif(in == 1'b0)\n\t\t\t\t\t\t\tstate <= three;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstate <= one;\n\t\t\t\t\tend\n\t\t\t\tthree:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif(in == 1'b0)\n\t\t\t\t\t\t\tstate <= four;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstate <= one;\n\t\t\t\t\tend\n\t\t\t\tfour:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif(in == 1'b0)\n\t\t\t\t\t\t\tstate <= five;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstate <= one;\n\t\t\t\t\tend\n\t\t\t\tfive:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif(in == 1'b0)\n\t\t\t\t\t\t\tstate <= six;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstate <= one;\n\t\t\t\t\tend\n\t\t\t\tsix:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif(in == 1'b0)\n\t\t\t\t\t\t\tstate <= seven;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstate <= one;\n\t\t\t\t\tend\n\t\t\t\tseven:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif(in == 1'b0)\n\t\t\t\t\t\t\tstate <= eight;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstate <= one;\n\t\t\t\t\tend\n\t\t\t\teight:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif(in == 1'b0)\n\t\t\t\t\t\t\tstate <= nine;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstate <= one;\n\t\t\t\t\tend\n\t\t\t\tnine:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif(in == 1'b0)\n\t\t\t\t\t\t\tstate <= zero;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstate <= one;\n\t\t\t\t\tend\n\t\t\t\tdefault:\n\t\t\t\t\tstate <= zero;\n\t\t\tendcase\n\t\tdata <= in? 1'b1 : 1'b0;\n\tend\n\talways @(posedge clk)\n\tbegin\n\t\tif(state == zero && in == 1'b0)\n\t\t\tdone <= 1'b1;\n\t\telse if(state == one && in == 1'b1)\n\t\t\tdone <= 1'b1;\n\t\telse\n\t\t\tdone <= 1'b0;\n\tend\nendmodule", "mean_score": 0.4976905286312103, "weighted_mean_score": 0.4947822690010071}
{"task_id": "timer", "completion": "\treg [3:0] count;\n\tinitial begin\n\t\tcount = 4'b0000;\n\tend\n\talways @(posedge clk)\n\tbegin\n\t\tif(load) count = data;\n\t\telse\n\t\tbegin\n\t\t\tif(count < 10'd9) count = count + 1;\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tcount = 4'b0000;\n\t\t\t\ttc = 1'b1;\n\t\t\tend\n\t\tend\n\tend\nendmodule", "mean_score": 0.4922374486923218, "weighted_mean_score": 0.4899442493915558}
{"task_id": "circuit7", "completion": "\treg t1, t2;\n\talways @(posedge clk)\n\t\tbegin\n\t\t\tt1 <= a ^ q;\n\t\t\tq <= t1;\n\t\tend\nendmodule", "mean_score": 0.4991948902606964, "weighted_mean_score": 0.4979863166809082}
{"task_id": "gatesv100", "completion": "\tassign out_both = in[99:1] & in[98:0];\n\tassign out_any  =\t in[98:0] | in[99:1];\n\tassign out_different = { in[99]^in[0], in[98:0]^in[99:1]};\nendmodule", "mean_score": 0.5055164694786072, "weighted_mean_score": 0.5061686635017395}
{"task_id": "vector100r", "completion": "\treg [99:0] last;\n\talways @ (*)\n\tbegin\n\t\tlast = in;\n\t\tout = last;\n\tend\nendmodule", "mean_score": 0.5059047341346741, "weighted_mean_score": 0.5053565502166748}
{"task_id": "countslow", "completion": "    reg [3:0] d[9:0];\n    \n    always @(posedge clk) begin\n        d[0] <= 0;\n        d[1] <= 1;\n        d[2] <= 2;\n        d[3] <= 3;\n        d[4] <= 4;\n        d[5] <= 5;\n        d[6] <= 6;\n        d[7] <= 7;\n        d[8] <= 8;\n        d[9] <= 9;\n        \n        if (reset)\n            q <= 0;\n        else if (slowena)\n            q <= d[q];\n    end\nendmodule", "mean_score": 0.4949612319469452, "weighted_mean_score": 0.4961968660354614}
{"task_id": "mt2015_eq2", "completion": "    assign z = (A[1:0] == B[1:0]);\nendmodule", "mean_score": 0.5045787692070007, "weighted_mean_score": 0.5032920241355896}
{"task_id": "always_case", "completion": "\talways@(*) begin\n\t\tcase(sel)\n\t\t\t3'd0:\tout = data0;\n\t\t\t3'd1:\tout = data1;\n\t\t\t3'd2:\tout = data2;\n\t\t\t3'd3:\tout = data3;\n\t\t\t3'd4:\tout = data4;\n\t\t\t3'd5:\tout = data5;\n\t\t\tdefault:\tout = 4'b0;\n\t\tendcase\n\tend\nendmodule", "mean_score": 0.4988996684551239, "weighted_mean_score": 0.4980047941207886}
{"task_id": "circuit3", "completion": "\tassign q = ~(a ^ b ^ c ^ d);\nendmodule", "mean_score": 0.4907960295677185, "weighted_mean_score": 0.48781323432922363}
{"task_id": "mt2015_q4", "completion": "    assign z = x & (~y) | (~x) & y;\nendmodule", "mean_score": 0.49267566204071045, "weighted_mean_score": 0.4895632863044739}
{"task_id": "alwaysblock2", "completion": "\tassign out_assign = a & b;\n\talways @(*)\n\t\tout_always_comb <= a & b;\n\talways @(posedge clk)\n\t\tout_always_ff <= a & b;\nendmodule", "mean_score": 0.5069929957389832, "weighted_mean_score": 0.5123659372329712}
{"task_id": "mt2015_muxdff", "completion": "    reg set;\n    always @(posedge clk) begin\n    \tQ <= set?L:q_in;\n    end\n    always @(posedge clk) begin\n    \tif(L)\n    \t\tset<=1;\n    \telse\n    \t\tset<=0;\n    end\nendmodule", "mean_score": 0.4979511499404907, "weighted_mean_score": 0.5010302662849426}
{"task_id": "m2014_q4j", "completion": "\twire [3:0] cout_1, cout_2;\n\twire [4:0] sum_1, sum_2;\n\tFullAdder_hierarchical FA_1 (x[0], y[0], 0, sum_1[0], cout_1[0]);\n\tFullAdder_hierarchical FA_2 (x[1], y[1], cout_1[0], sum_1[1], cout_1[1]);\n\tFullAdder_hierarchical FA_3 (x[2], y[2], cout_1[1], sum_1[2], cout_1[2]);\n\tFullAdder_hierarchical FA_4 (x[3], y[3], cout_1[2], sum_1[3], cout_1[3]);\n\tFullAdder_hierarchical FA_5 (x[3], y[3], cout_1[3], sum_1[4], cout_1[4]);\n\tFullAdder_hierarchical FA_6 (x[3], y[3], cout_1[4], sum_1[5], cout_1[5]);\n\tFullAdder_hierarchical FA_7 (x[3], y[3], cout_1[5], sum_1[6], cout_1[6]);\n\tFullAdder_hierarchical FA_8 (x[3], y[3], cout_1[6], sum_1[7], cout_1[7]);\n\tFullAdder_hierarchical FA_9 (x[3], y[3], cout_1[7], sum_1[8], cout_1[8]);\n\tFullAdder_hierarchical FA_10 (x[3], y[3], cout_1[8], sum_1[9], cout_1[9]);\n\tFullAdder_hierarchical FA_11 (x[3], y[3], cout_1[9], sum_1[10], cout_1[10]);\n\tFullAdder_hierarchical FA_12 (x[3], y[3], cout_1[10], sum_1[11], cout_1[11]);\n\tFullAdder_hierarchical FA_13 (x[3], y[3], cout_1[11], sum_1[12], cout_1[12]);\n\tFullAdder_hierarchical FA_14 (x[3], y[3], cout_1[12], sum_1[13], cout_1[13]);\n\tFullAdder_hierarchical FA_15 (x[3], y[3], cout_1[13], sum_1[14], cout_1[14]);\n\tFullAdder_hierarchical FA_16 (x[3], y[3], cout_1[14], sum_1[15], cout_1[15]);\n\tFullAdder_hierarchical FA_17 (x[3], y[3], cout_1[15], sum_1[16], cout_1[16]);\n\tFullAdder_hierarchical FA_18 (x[3], y[3], cout_1[16], sum_1[17], cout_1[17]);\n\tFullAdder_hierarchical FA_19 (x[3], y[3], cout_1[17], sum_1[18], cout_1[18]);\n\tFullAdder_hierarchical FA_20 (x[3], y[3], cout_1[18], sum_1[19], cout_1[19]);\n\tFullAdder_hierarchical FA_21 (x[3], y[3], cout_1[19], sum_1[20], cout_1[20]);\n\tFullAdder_hierarchical FA_22 (x[3], y[3], cout_1[20], sum_1[21], cout_1[21]);\n\tFullAdder_hierarchical FA_23 (x[3], y[3], cout_1[21], sum_1[22], cout_1[22]);\n\tFullAdder_hierarchical FA_24 (x[3], y[3], cout_1[22], sum_1[23], cout_1[23]);\n\tFullAdder_hierarchical FA_25 (x[3], y[3], cout_1[23], sum_1[24], cout_1endmodule", "mean_score": 0.5023809671401978, "weighted_mean_score": 0.5027023553848267}
{"task_id": "norgate", "completion": "assign out = a && b;\nendmodule", "mean_score": 0.48723405599594116, "weighted_mean_score": 0.46984589099884033}
{"task_id": "fsm3comb", "completion": "\treg\t[1:0]\tns_0;\n\tassign\tout = (state[0])&(~state[1])&ns_0[0] | (~state[0])&(state[1])&ns_0[1] ;\n\talways@(*) begin\n\t\tcase({state[0], state[1]})\n\t\t\t2'b00:\tns_0 = 2'b00;\n\t\t\t2'b01:\tns_0 = 2'b01;\n\t\t\t2'b10:\tns_0 = 2'b10;\n\t\t\t2'b11:\tns_0 = 2'b11;\n\t\tendcase\n\tend\nendmodule", "mean_score": 0.5024316310882568, "weighted_mean_score": 0.5039094090461731}
{"task_id": "fsm_serialdata", "completion": "// Modify FSM and datapath from Fsm_serialdata\nreg [4:0] state;\nreg [4:0] next_state;\nreg [7:0] data;\nreg [7:0] data_in;\nreg [2:0] c;\nreg [7:0] byte_out;\nreg done;\n// New: Add reset_fifo\n// New: Add FSM state_in\n// New: Add FSM state_out\n// Modify FSM from Fsm_serialdata\n// Modify datapath from Fsm_serialdata\nreg [2:0] count;\nreg [7:0] data_mem [0:2];\nreg [7:0] in_data;\ninitial\nbegin\n\tstate = 0;\n\tdata_mem[0] = 0;\n\tdata_mem[1] = 0;\n\tdata_mem[2] = 0;\n\tc = 0;\n\tcount = 0;\nend\nalways @(posedge clk)\nbegin\n\tif(reset)\n\tbegin\n\t\tstate <= 0;\n\t\tdata_mem[0] <= 0;\n\t\tdata_mem[1] <= 0;\n\t\tdata_mem[2] <= 0;\n\t\tc <= 0;\n\t\tcount <= 0;\n\tend\n\telse\n\tbegin\n\t\tcase(state)\n\t\t0:\n\t\tbegin\n\t\t\tdone <= 0;\n\t\t\t// New: Add reset_fifo\n\t\t\t//if(in_byte == 0)\n\t\t\tif(in_byte == 32'h0)\n\t\t\tbegin\n\t\t\t\tstate <= 1;\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tdata_mem[0] <= in_byte;\n\t\t\t\tc <= c + 1;\n\t\t\tend\n\t\tend\n\t\t1:\n\t\tbegin\n\t\t\tif(c == 0)\n\t\t\tbegin\n\t\t\t\tstate <= 2;\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tc <= c - 1;\n\t\t\t\tdata_mem[0] <= data_mem[0];\n\t\t\tend\n\t\tend\n\t\t2:\n\t\tbegin\n\t\t\tif(count < 7)\n\t\t\tbegin\n\t\t\t\tdata_mem[1] <= data_mem[0];\n\t\t\t\tdata_mem[0] <= 0;\n\t\t\t\tcount <= count + 1;\n\t\t\t\tstate <= 0;\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tdata_mem[1] <= data_mem[1];\n\t\t\t\tdata_mem[0] <= data_mem[0];\n\t\t\t\tcount <= 0;\n\t\t\t\tstate <= 3;\n\t\t\tend\n\t\tend\n\t\t3:\n\t\tbegin\n\t\t\tdone <= 1;\n\t\t\tdata_mem[1] <= data_mem[1];\n\t\t\tdata_mem[0] <= data_mem[0];\n\t\t\tstate <= 0;\n\t\tend\n\t\tendcase\n\tend\nend\nendmodule", "mean_score": 0.4917333424091339, "weighted_mean_score": 0.4899464249610901}
{"task_id": "vector3", "completion": "\tassign w = {a, b};\n\tassign x = {c, d};\n\tassign y = {e, f};\n\tassign z = {3'b000, 8'b0000_0000};\nendmodule", "mean_score": 0.5027027130126953, "weighted_mean_score": 0.502528965473175}
{"task_id": "history_shift", "completion": "    reg [31:0] history [1:1023];\n    reg [31:0] next_history;\n    \n    integer i;\n    integer j;\n    integer k;\n    integer x;\n    \n    initial begin\n        for (i = 0; i < 1024; i = i + 1) begin\n            history[i] <= 32'b0;\n        end\n        for (i = 0; i < 1024; i = i + 1) begin\n            next_history[i] <= 32'b0;\n        end\n    end\n    \n    assign prediction_history = history;\n    \n    always @(posedge clk) begin\n        if (areset == 1'b0) begin\n            history[0] <= {16{1'b0}};\n            history[1] <= {16{1'b0}};\n            history[2] <= {16{1'b0}};\n            history[3] <= {16{1'b0}};\n            history[4] <= {16{1'b0}};\n            history[5] <= {16{1'b0}};\n            history[6] <= {16{1'b0}};\n            history[7] <= {16{1'b0}};\n            history[8] <= {16{1'b0}};\n            history[9] <= {16{1'b0}};\n            history[10] <= {16{1'b0}};\n            history[11] <= {16{1'b0}};\n            history[12] <= {16{1'b0}};\n            history[13] <= {16{1'b0}};\n            history[14] <= {16{1'b0}};\n            history[15] <= {16{1'b0}};\n            history[16] <= {16{1'b0}};\n            history[17] <= {16{1'b0}};\n            history[18] <= {16{1'b0}};\n            history[19] <= {16{1'b0}};\n            history[20] <= {16{1'b0}};\n            history[21] <= {16{1'b0}};\n            history[22] <= {16{1'b0}};\n            history[23] <= {16{1'b0}};\n            history[24] <= {16{1'b0}};\n            history[25] <= {16{1'b0}};\n            history[26] <= {16{1'b0}};\n            history[27] <= {16{1'b0}};\n            history[28] <= {16{1'b0}};\n            history[29] <= {16{1'b0}};\n            history[30] <= {16{1'b0}};\n            history[31] <= {16{1'b0}};\n        end\n        else begin\n            if (predict_valid == 1'b1) begin\n                history[predict_addr[11:0]] <= {predict_addr[31:12], 1'b0};\n                next_history[predict_addr[11:0]] <= {predict_addr[31:12], 1'b1};\n            end\n            else begin\n                history[predict_addr[11:0]] <= {predict_addr[31:12], 1'b0};\n                next_history[predict_addr[11:0]] <= {predict_addr[31:12], 1'b0};\n            end\n        end\n    end\n    \n    integer j;\n    reg [31:0] actual_history [1:1023];\n    initial begin\n        for (j = 0; j < 1024; j = j + 1) begin\n            actual_history[j] = 32'b0;\n        end\n    end\n    \n    integer i;\n    reg [31:0] actual_next_history [1:1023];\n    initial begin\n        for (i = 0; i < 1024; i = i + 1) begin\n            actual_next_history[i] = 32'b0;\n        end\n    end\n    \n    always @(posedge clk) begin\n        if (reset_history == 1'b1) begin\n            history[0] <= {16{1'b0}};\n            history[1] <= {endmodule", "mean_score": 0.5050450563430786, "weighted_mean_score": 0.5001648664474487}
{"task_id": "bugs_addsubz", "completion": "\treg signed [8:0] acc;\n\talways @(*) begin\n\t\t{out, acc} = a + b;\n\t\tif (acc == 0)\n\t\t\tresult_is_zero = 1;\n\t\telse\n\t\t\tresult_is_zero = 0;\n\tend\n\talways @(*)\n\t\tif (do_sub)\n\t\t\tacc = ~acc + 1;\nendmodule", "mean_score": 0.49567511677742004, "weighted_mean_score": 0.4975410997867584}
{"task_id": "truthtable1", "completion": "\tassign f = (x3 & x2) | (x3 & x1) | (~x3 & ~x2 & ~x1);\nendmodule", "mean_score": 0.4968487620353699, "weighted_mean_score": 0.49455487728118896}
{"task_id": "circuit5", "completion": "\treg [3:0] i;\n\talways @(*)\n\t\tbegin\n\t\t\tif(c==4'd0)\n\t\t\t\tq = b;\n\t\t\telse if(c==4'd1)\n\t\t\t\tq = e;\n\t\t\telse if(c==4'd2)\n\t\t\t\tq = a;\n\t\t\telse if(c==4'd3)\n\t\t\t\tq = d;\n\t\t\telse\n\t\t\t\tq = q;\n\t\tend\nendmodule", "mean_score": 0.49989616870880127, "weighted_mean_score": 0.49704253673553467}
{"task_id": "m2014_q3", "completion": "    assign f = (~x[1] & x[3]) | x[2];\nendmodule", "mean_score": 0.49815496802330017, "weighted_mean_score": 0.4981965720653534}
{"task_id": "m2014_q4f", "completion": "\tassign out = ~(in1 ^ in2);\nendmodule", "mean_score": 0.5010460019111633, "weighted_mean_score": 0.5043846964836121}
{"task_id": "gshare", "completion": "\nparameter TRAIN_LENGTH = 32;\nparameter PREDICT_LENGTH = 7;\nparameter HISTORY_LENGTH = 7;\nparameter TRAIN_LENGTH_WIDTH = $clog2(TRAIN_LENGTH);\nparameter PREDICT_LENGTH_WIDTH = $clog2(PREDICT_LENGTH);\nparameter HISTORY_LENGTH_WIDTH = $clog2(HISTORY_LENGTH);\n\nreg [TRAIN_LENGTH_WIDTH-1:0] train_length;\nreg [PREDICT_LENGTH_WIDTH-1:0] predict_length;\nreg [HISTORY_LENGTH_WIDTH-1:0] history_length;\n\nreg [TRAIN_LENGTH_WIDTH-1:0] train_length_counter;\nreg [PREDICT_LENGTH_WIDTH-1:0] predict_length_counter;\nreg [HISTORY_LENGTH_WIDTH-1:0] history_length_counter;\n\nreg [1:0] Rc;\nreg [1:0] Rb;\nreg [1:0] Ta;\nreg [1:0] Tb;\n\nreg [TRAIN_LENGTH_WIDTH-1:0] pc_train;\nreg [PREDICT_LENGTH_WIDTH-1:0] pc_predict;\nreg [HISTORY_LENGTH_WIDTH-1:0] pc_history;\n\nreg [TRAIN_LENGTH_WIDTH-1:0] pc_train_counter;\nreg [PREDICT_LENGTH_WIDTH-1:0] pc_predict_counter;\nreg [HISTORY_LENGTH_WIDTH-1:0] pc_history_counter;\n\nreg [1:0] valid_train;\nreg [1:0] valid_predict;\nreg [1:0] valid_history;\n\nreg [TRAIN_LENGTH_WIDTH-1:0] correct_prediction;\nreg [TRAIN_LENGTH_WIDTH-1:0] actual_acc;\nreg [TRAIN_LENGTH_WIDTH-1:0] cycles_count;\n\nreg [1:0] status;\nreg [1:0] prediction;\nreg [1:0] target_data;\nreg [1:0] actual_data;\n\nreg [$clog2(TRAIN_LENGTH)-1:0] pc_addr;\nreg [$clog2(TRAIN_LENGTH)-1:0] pc_addr_counter;\nreg [$clog2(TRAIN_LENGTH)-1:0] pc_addr_history;\n\ninitial\nbegin\n\ttrain_length = TRAIN_LENGTH;\n\tpredict_length = PREDICT_LENGTH;\n\thistory_length = HISTORY_LENGTH;\n\t\n\tpc_addr = 0;\n\tpc_addr_counter = 0;\n\tpc_addr_history = 0;\n\t\n\tpredict_taken = 0;\n\tpredict_history = 0;\n\t\n\tactual_acc = 0;\n\tcycles_count = 0;\n\t\n\tstatus = 0;\n\tprediction = 0;\n\ttarget_data = 0;\n\tactual_data = 0;\n\t\n\tvalid_train = 0;\n\tvalid_predict = 0;\n\tvalid_history = 0;\n\t\n\tcorrect_prediction = 0;\n\t\n\tpc_train = 0;\n\tpc_predict = 0;\n\tpc_history = 0;\n\t\n\tpc_train_counter = 0;\n\tpc_predict_counter = 0;\n\tpc_history_counter = 0;\nend\n\nalways @(posedge clk)\nbegin\n\tif(~areset)\n\tbegin\n\t\tpc_addr <= 0;\n\t\tpc_addr_counter <= 0;\n\t\tpc_addr_history <= 0;\n\t\t\n\t\tpredict_taken <= 0;\n\t\tpredict_history <= 0;\n\t\t\n\t\tactual_acc <= 0;\n\t\tcycles_count <= 0;\n\t\t\n\t\tstatus <= 0;\n\t\tprediction <= 0;\n\t\ttarget_data <= 0;\n\t\tactual_data <= 0;\n\t\t\n\t\tvalid_train <= 0;\n\t\tvalid_pendmodule", "mean_score": 0.49917492270469666, "weighted_mean_score": 0.4970937669277191}
{"task_id": "vector5", "completion": "\tassign out = {a, b, c, d, e};\nendmodule", "mean_score": 0.5035320520401001, "weighted_mean_score": 0.5034758448600769}
{"task_id": "mt2015_q4a", "completion": "    assign z = x & (~y) | (~x) & y;\nendmodule", "mean_score": 0.49267566204071045, "weighted_mean_score": 0.4895632863044739}
{"task_id": "dff8p", "completion": "\talways @(posedge clk)\n\t\tbegin\n\t\t\tif(reset)\n\t\t\t\tq <= 0;\n\t\t\telse\n\t\t\t\tq <= d;\n\t\tend\nendmodule", "mean_score": 0.5053235292434692, "weighted_mean_score": 0.5010302662849426}
{"task_id": "notgate", "completion": "\tassign out=~in;\nendmodule", "mean_score": 0.49266862869262695, "weighted_mean_score": 0.49625927209854126}
{"task_id": "wire4", "completion": "\tassign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\nendmodule", "mean_score": 0.48761260509490967, "weighted_mean_score": 0.48627179861068726}
{"task_id": "circuit6", "completion": "\talways @(*)\n\t\tcase(a)\n\t\t\t3'd0:\tq = 16'h8000;\n\t\t\t3'd1:\tq = 16'h4000;\n\t\t\t3'd2:\tq = 16'h2000;\n\t\t\t3'd3:\tq = 16'h1000;\n\t\t\t3'd4:\tq = 16'h0800;\n\t\t\t3'd5:\tq = 16'h0400;\n\t\t\t3'd6:\tq = 16'h0200;\n\t\t\t3'd7:\tq = 16'h0100;\n\t\tendcase\nendmodule", "mean_score": 0.5081818103790283, "weighted_mean_score": 0.5053946375846863}
{"task_id": "lemmings4", "completion": "\treg [2:0] state, next_state;\n\tparameter LEFT = 3'b000, RIGHT = 3'b001, FLEFT = 3'b010, FRIGHT = 3'b011, DIGR = 3'b100, DIGL = 3'b101;\n\talways @(*) begin\n\t\tcase (state)\n\t\t\tLEFT: next_state = ground? (dig? DIGL : (bump_left? RIGHT : LEFT)) : FLEFT;\n\t\t\tRIGHT: next_state = ground? (dig? DIGR : (bump_right? LEFT : RIGHT)) : FRIGHT;\n\t\t\tFLEFT: next_state = ground? (dig? DIGL : LEFT) : state;\n\t\t\tFRIGHT: next_state = ground? (dig? DIGR : RIGHT) : state;\n\t\t\tDIGL: next_state = ground? DIGL : state;\n\t\t\tDIGR: next_state = ground? DIGR : state;\n\t\t\tdefault: next_state = state;\n\t\tendcase\n\tend\n\talways @(posedge clk, posedge areset) begin\n\t\tif (areset)\n\t\t\tstate <= LEFT;\n\t\telse\n\t\t\tstate <= next_state;\n\tend\n\tassign walk_left = (state == LEFT);\n\tassign walk_right = (state == RIGHT);\n\tassign aaah = (state == FLEFT) || (state == FRIGHT);\n\tassign digging = (state == DIGL) || (state == DIGR);\nendmodule", "mean_score": 0.48428452014923096, "weighted_mean_score": 0.48311999440193176}
{"task_id": "review2015_fsm", "completion": "    reg spi_data;\n    reg spi_clk;\n    reg spi_cs;\n    reg state;\n    reg [7:0] data_counter;\n    reg [8:0] state_counter;\n    reg [7:0] data_counter_limit;\n    reg [8:0] state_counter_limit;\n    reg [7:0] data_counter_one;\n    reg [8:0] state_counter_one;\n    reg [7:0] data_counter_two;\n    reg [8:0] state_counter_two;\n    reg [7:0] data_counter_three;\n    reg [8:0] state_counter_three;\n    reg [7:0] data_counter_four;\n    reg [8:0] state_counter_four;\n    reg [7:0] data_counter_five;\n    reg [8:0] state_counter_five;\n    reg [7:0] data_counter_six;\n    reg [8:0] state_counter_six;\n    reg [7:0] data_counter_seven;\n    reg [8:0] state_counter_seven;\n    reg [7:0] data_counter_eight;\n    reg [8:0] state_counter_eight;\n    reg [7:0] data_counter_nine;\n    reg [8:0] state_counter_nine;\n    reg [7:0] data_counter_ten;\n    reg [8:0] state_counter_ten;\n    reg [7:0] data_counter_eleven;\n    reg [8:0] state_counter_eleven;\n    reg [7:0] data_counter_twelve;\n    reg [8:0] state_counter_twelve;\n    reg [7:0] data_counter_thirteen;\n    reg [8:0] state_counter_thirteen;\n    reg [7:0] data_counter_fourteen;\n    reg [8:0] state_counter_fourteen;\n    reg [7:0] data_counter_fifteen;\n    reg [8:0] state_counter_fifteen;\n    reg [7:0] data_counter_sixteen;\n    reg [8:0] state_counter_sixteen;\n    reg [7:0] data_counter_seventeen;\n    reg [8:0] state_counter_seventeen;\n    reg [7:0] data_counter_eighteen;\n    reg [8:0] state_counter_eighteen;\n    reg [7:0] data_counter_nineteen;\n    reg [8:0] state_counter_nineteen;\n    reg [7:0] data_counter_twenty;\n    reg [8:0] state_counter_twenty;\n    reg [7:0] data_counter_twentyone;\n    reg [8:0] state_counter_twentyone;\n    reg [7:0] data_counter_twentytwo;\n    reg [8:0] state_counter_twentytwo;\n    reg [7:0] data_counter_twentythree;\n    reg [8:0] state_counter_twentythree;\n    reg [7:0] data_counter_twentyfour;\n    reg [8:0] state_counter_twentyfour;\n    reg [7:0] data_counter_twentyfive;\n    reg [8:0] state_counter_twentyfive;\n    reg [7:0] data_counter_twentysix;\n    reg [8:0] state_counter_twentysix;\n    reg [7:0] data_counter_twentyseven;\n    reg [8:0] state_counter_twentyseven;\n    reg [7:0] data_counter_twentyeight;\n    reg [8:0] state_counter_twentyeight;\n    reg [7:0] data_counter_twentynine;\n    reg [8:0] state_counter_twentynine;\n    reg [7:0] data_counter_one_hundred;\n    reg [8:0] state_counter_one_hundred;\n    reg [7:0] data_counter_one_hundred_one;\n    reg [8:0] state_counter_one_hundredendmodule", "mean_score": 0.4898635745048523, "weighted_mean_score": 0.483665406703949}
{"task_id": "always_casez", "completion": "\talways @(*)\n\t\tcasex (in)\n\t\t\t8'b1xxx_x100: pos = 3'd4;\n\t\t\t8'b01xx_x100: pos = 3'd3;\n\t\t\t8'b001x_x100: pos = 3'd2;\n\t\t\t8'b0001_x100: pos = 3'd1;\n\t\t\tdefault: pos = 3'd0;\n\t\tendcase\nendmodule", "mean_score": 0.5, "weighted_mean_score": 0.5024694800376892}
{"task_id": "alwaysblock1", "completion": "assign out_assign=a&b;\nalways@(*)\nout_alwaysblock=a&b;\nendmodule", "mean_score": 0.5005012154579163, "weighted_mean_score": 0.49599695205688477}
{"task_id": "fsm2", "completion": "\treg\tq;\n\treg\tqb;\n\talways@(posedge clk or posedge areset)\n\t\tif(areset)\tbegin\n\t\t\tq <= 1'b0;\n\t\t\tqb <= 1'b1;\n\t\tend\n\t\telse\n\t\t\tbegin\n\t\t\t\tq <= jq;\n\t\t\t\tqb <= ~jq;\n\t\t\tend\n\tassign out = j & q | ~k & qb;\nendmodule", "mean_score": 0.4900273382663727, "weighted_mean_score": 0.49093300104141235}
{"task_id": "conwaylife", "completion": "\treg [3:0] state, next_state;\n\tparameter S0=4'd0, S1=4'd1, S2=4'd2, S3=4'd3, S4=4'd4, S5=4'd5, S6=4'd6, S7=4'd7, S8=4'd8, S9=4'd9, S10=4'd10, S11=4'd11, S12=4'd12, S13=4'd13, S14=4'd14, S15=4'd15, S16=4'd16, S17=4'd17, S18=4'd18, S19=4'd19, S20=4'd20, S21=4'd21, S22=4'd22, S23=4'd23, S24=4'd24, S25=4'd25, S26=4'd26, S27=4'd27, S28=4'd28, S29=4'd29, S30=4'd30, S31=4'd31, S32=4'd32, S33=4'd33, S34=4'd34, S35=4'd35, S36=4'd36, S37=4'd37, S38=4'd38, S39=4'd39, S40=4'd40, S41=4'd41, S42=4'd42, S43=4'd43, S44=4'd44, S45=4'd45, S46=4'd46, S47=4'd47, S48=4'd48, S49=4'd49, S50=4'd50, S51=4'd51, S52=4'd52, S53=4'd53, S54=4'd54, S55=4'd55, S56=4'd56, S57=4'd57, S58=4'd58, S59=4'd59, S60=4'd60, S61=4'd61, S62=4'd62, S63=4'd63, S64=4'd64, S65=4'd65, S66=4'd66, S67=4'd67, S68=4'd68, S69=4'd69, S70=4'd70, S71=4'd71, S72=4'd72, S73=4'd73, S74=4'd74, S75=4'd75, S76=4'd76, S77=4'd77, S78=4'd78, S79=4'd79, S80=4'd80, S81=4'd81, S82=4'd82, S83=4'd83, S84=4'd84, S85=4'd85, S86=4'd86, S87=4'd87, S88=4'd88, S89=4'd89, S90=4'd90, S91=4'd91, S92=4'd92, S93=4'd93, S94=4'd94, S95=4'd95, S96=4'd96, S97=4'd97, S98=4'd98, S99=4'd99, S100=4'd100, S101=4'd101, S102=4'd102, S103=4'd103, S104=4'd104, S105=4'd105, S106=4'd106, S107=4'd107, S108=4'd108, S109=4'd109, S110=4'd110, S111=4'd111, S112=4'd112, S113=4'd113, S114=4'd114, S115=4'd115, S116=4'd116, S117=4'd117, S118=4'd118, S119=4'd119, S120=4'd120, S121=4'd121, S122=4'd122, S123=4'd123, S124=4'd124, S125=4'd125, S126=4'd126, S127=4'd127, S128=4'd128, S129=4'd129, S130=4'd130, S131=4'd131, S132=4'd132, S133=4'd133, S134=4'd134, S135=4'd135, S136=4'd136, S137=4'd137, S138=4'd138, S139=4'd139, S140=4'd140, S141=4'd141, S142=4'd142, S143=4'd143endmodule", "mean_score": 0.4973202645778656, "weighted_mean_score": 0.49816471338272095}
{"task_id": "m2014_q4g", "completion": "\tassign out = ~(in1 ^ in2) ^ in3;\nendmodule", "mean_score": 0.4968253970146179, "weighted_mean_score": 0.4989301264286041}
{"task_id": "mt2015_q4b", "completion": "    assign z = x & (~y) | (~x) & y;\nendmodule", "mean_score": 0.49267566204071045, "weighted_mean_score": 0.4895632863044739}
{"task_id": "m2014_q6", "completion": "\treg\t[1:0]\tstate, next_state;\n\tparameter\t[1:0]\tA = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\t// State transition logic\n\talways@(*) begin\n\t\tcase({state, w})\n\t\t\t{A, 1'b0}:\tnext_state = A;\n\t\t\t{A, 1'b1}:\tnext_state = B;\n\t\t\t{B, 1'b0}:\tnext_state = C;\n\t\t\t{B, 1'b1}:\tnext_state = B;\n\t\t\t{C, 1'b0}:\tnext_state = A;\n\t\t\t{C, 1'b1}:\tnext_state = D;\n\t\t\t{D, 1'b0}:\tnext_state = C;\n\t\t\t{D, 1'b1}:\tnext_state = B;\n\t\tendcase\n\tend\n\t// State flip-flops with asynchronous reset\n\talways@(posedge clk) begin\n\t\tif(reset)\n\t\t\tstate <= A;\n\t\telse\n\t\t\tstate <= next_state;\n\tend\n\t// Output logic\n\tassign z = (state == D);\nendmodule", "mean_score": 0.5033016800880432, "weighted_mean_score": 0.5048966407775879}
{"task_id": "kmap2", "completion": "\tassign out = a & b & c | ~a & ~b & ~c;\nendmodule", "mean_score": 0.5006425976753235, "weighted_mean_score": 0.4956185519695282}
{"task_id": "always_case2", "completion": "\talways @(*)\n\t\tcase (in)\n\t\t\t4'b0000: pos = 2'd0;\n\t\t\t4'b0001: pos = 2'd0;\n\t\t\t4'b0010: pos = 2'd1;\n\t\t\t4'b0011: pos = 2'd2;\n\t\t\t4'b0100: pos = 2'd2;\n\t\t\t4'b0101: pos = 2'd3;\n\t\t\t4'b0110: pos = 2'd3;\n\t\t\t4'b0111: pos = 2'd3;\n\t\t\t4'b1000: pos = 2'd3;\n\t\t\t4'b1001: pos = 2'd3;\n\t\t\t4'b1010: pos = 2'd2;\n\t\t\t4'b1011: pos = 2'd1;\n\t\t\t4'b1100: pos = 2'd0;\n\t\t\t4'b1101: pos = 2'd0;\n\t\t\t4'b1110: pos = 2'd0;\n\t\t\t4'b1111: pos = 2'd0;\n\t\t\tdefault pos = 2'd0;\n\t\tendcase\nendmodule", "mean_score": 0.5, "weighted_mean_score": 0.5000659823417664}
{"task_id": "ece241_2014_q4", "completion": "\treg q1, q2, q3, q4;\n\t\n\talways @(posedge clk)\tbegin\n\t\tq1 <= x ^ q1;\n\t\tq2 <= x && (~q2);\n\t\tq3 <= x || (~q3);\n\t\tq4 <= x && q4;\n\tend\n\t\n\tassign z = ~(q1 | q2 | q3 | q4);\n\t\nendmodule", "mean_score": 0.5057471394538879, "weighted_mean_score": 0.503986656665802}
{"task_id": "rule110", "completion": "\treg [3:0] count;\n\treg [3:0] count2;\n\treg [7:0] data2 [0:7];\n\treg [511:0] data3 [0:31];\n\treg [511:0] temp;\n\treg [3:0] i;\n\treg [3:0] j;\n\treg [7:0] k;\n\treg [3:0] line;\n\treg [511:0] out2;\n\treg [3:0] l;\n\treg [3:0] count3;\n\treg [7:0] data4 [0:7];\n\treg [7:0] data5 [0:31];\n\treg [511:0] out3;\n\treg [3:0] count4;\n\treg start;\n\treg [7:0] data6 [0:7];\n\treg [7:0] data7 [0:31];\n\treg [511:0] out4;\n\treg [7:0] data8 [0:7];\n\treg [7:0] data9 [0:31];\n\treg [511:0] out5;\n\treg [7:0] data10 [0:7];\n\treg [7:0] data11 [0:31];\n\treg start2;\n\treg [3:0] l2;\n\treg [7:0] data12 [0:7];\n\treg [7:0] data13 [0:31];\n\treg [511:0] out6;\n\treg [7:0] data14 [0:7];\n\treg [7:0] data15 [0:31];\n\treg [511:0] out7;\n\treg [7:0] data16 [0:7];\n\treg [7:0] data17 [0:31];\n\treg [511:0] out8;\n\treg [7:0] data18 [0:7];\n\treg [7:0] data19 [0:31];\n\treg [511:0] out9;\n\treg [7:0] data20 [0:7];\n\treg [7:0] data21 [0:31];\n\treg [511:0] out10;\n\treg [7:0] data22 [0:7];\n\treg [7:0] data23 [0:31];\n\treg [511:0] out11;\n\treg [7:0] data24 [0:7];\n\treg [7:0] data25 [0:31];\n\treg [511:0] out12;\n\treg [7:0] data26 [0:7];\n\treg [7:0] data27 [0:31];\n\treg [511:0] out13;\n\treg [7:0] data28 [0:7];\n\treg [7:0] data29 [0:31];\n\treg [511:0] out14;\n\treg [7:0] data30 [0:7];\n\treg [7:0] data31 [0:31];\n\treg [7:0] data32 [0:7];\n\treg [7:0] data33 [0:31];\n\treg [511:0] out15;\n\treg [7:0] data34 [0:7];\n\treg [7:0] data35 [0:31];\n\treg [511:0] out16;\n\treg [7:0] data36 [0:7];\n\treg [7:0] data37 [0:31];\n\treg [511:0] out17;\n\treg [7:0] data38 [0:7];\n\treg [7:0] data39 [0:31];\n\treg [511:0] out18;\n\treg [7:0] data40 [0:7];\n\treg [7:0] data41 [0:31];\n\treg [511:0] out19;\n\treg [7:0] data42 [0:7];\n\treg [7:0] data43 [0:31];\n\treg [511:0] out20;\n\treg [7:0] data44 [0:7];\n\treg [7:0] data45 [0:31];\n\treg [511:0] out21;\n\treg [7:0] data46 [0:7];\n\treg [7endmodule", "mean_score": 0.4986947476863861, "weighted_mean_score": 0.4980233311653137}
{"task_id": "vector1", "completion": "\tassign out_hi = in[15:8];\n\tassign out_lo = in[7:0];\nendmodule", "mean_score": 0.5011373162269592, "weighted_mean_score": 0.5036895871162415}
{"task_id": "vector0", "completion": "\tassign outv = vec;\n\tassign o2 = vec[2];\n\tassign o1 = vec[1];\n\tassign o0 = vec[0];\nendmodule", "mean_score": 0.5075035691261292, "weighted_mean_score": 0.5072144269943237}
{"task_id": "review2015_shiftcount", "completion": "\treg [3:0] temp;\n\talways @(posedge clk)\n\t\tbegin\n\t\t\tif(shift_ena == 1)\n\t\t\t\tbegin\n\t\t\t\t\ttemp = {q[2:0], data};\n\t\t\t\tend\n\t\t\telse if(count_ena == 1)\n\t\t\t\tbegin\n\t\t\t\t\ttemp = temp - 4'd1;\n\t\t\t\tend\n\t\t\telse\n\t\t\t\ttemp = temp;\n\t\t\t\n\t\t\tif(temp < 0)\n\t\t\t\ttemp = 4'b1001;\n\t\t\telse if(temp > 9)\n\t\t\t\ttemp = 4'b1001;\n\t\t\t\n\t\t\tq <= temp;\n\t\tend\nendmodule", "mean_score": 0.5013157725334167, "weighted_mean_score": 0.5008207559585571}
{"task_id": "dff8", "completion": "    always @(posedge clk)\n        q <= d;\nendmodule", "mean_score": 0.49282824993133545, "weighted_mean_score": 0.4947803020477295}
{"task_id": "xnorgate", "completion": "assign out = a && b;\nendmodule", "mean_score": 0.48723405599594116, "weighted_mean_score": 0.46984589099884033}
{"task_id": "lemmings3", "completion": "\treg [2:0] state, next_state;\n\tparameter LEFT = 3'b000, RIGHT = 3'b001, FLEFT = 3'b010, FRIGHT = 3'b011, DIGR = 3'b100, DIGL = 3'b101;\n\talways @(*) begin\n\t\tcase (state)\n\t\t\tLEFT: next_state = ground? (dig? DIGL : (bump_left? RIGHT : LEFT)) : FLEFT;\n\t\t\tRIGHT: next_state = ground? (dig? DIGR : (bump_right? LEFT : RIGHT)) : FRIGHT;\n\t\t\tFLEFT: next_state = ground? (dig? DIGL : LEFT) : state;\n\t\t\tFRIGHT: next_state = ground? (dig? DIGR : RIGHT) : state;\n\t\t\tDIGL: next_state = ground? DIGL : state;\n\t\t\tDIGR: next_state = ground? DIGR : state;\n\t\t\tdefault: next_state = state;\n\t\tendcase\n\tend\n\talways @(posedge clk, posedge areset) begin\n\t\tif (areset)\n\t\t\tstate <= LEFT;\n\t\telse\n\t\t\tstate <= next_state;\n\tend\n\tassign walk_left = (state == LEFT);\n\tassign walk_right = (state == RIGHT);\n\tassign aaah = (state == FLEFT) || (state == FRIGHT);\n\tassign digging = (state == DIGL) || (state == DIGR);\nendmodule", "mean_score": 0.48428452014923096, "weighted_mean_score": 0.48311999440193176}
{"task_id": "review2015_fsmseq", "completion": "\treg[3:0] state;\n\treg[3:0] next_state;\n\treg[31:0] shifted_data;\n\tparameter S0=4'b0000, S1=4'b0001, S2=4'b0010, S3=4'b0011, S4=4'b0100, S5=4'b0101, S6=4'b0110, S7=4'b0111, S8=4'b1000, S9=4'b1001;\n\talways@(*)\n\tbegin\n\t\tcase(state)\n\t\t\tS0:\n\t\t\tbegin\n\t\t\t\tnext_state=data?S1:S0;\n\t\t\tend\n\t\t\tS1:\n\t\t\tbegin\n\t\t\t\tnext_state=data?S2:S1;\n\t\t\tend\n\t\t\tS2:\n\t\t\tbegin\n\t\t\t\tnext_state=data?S3:S2;\n\t\t\tend\n\t\t\tS3:\n\t\t\tbegin\n\t\t\t\tnext_state=data?S4:S3;\n\t\t\tend\n\t\t\tS4:\n\t\t\tbegin\n\t\t\t\tnext_state=data?S5:S4;\n\t\t\tend\n\t\t\tS5:\n\t\t\tbegin\n\t\t\t\tnext_state=data?S6:S5;\n\t\t\tend\n\t\t\tS6:\n\t\t\tbegin\n\t\t\t\tnext_state=data?S7:S6;\n\t\t\tend\n\t\t\tS7:\n\t\t\tbegin\n\t\t\t\tnext_state=data?S8:S7;\n\t\t\tend\n\t\t\tS8:\n\t\t\tbegin\n\t\t\t\tnext_state=data?S9:S8;\n\t\t\tend\n\t\t\tS9:\n\t\t\tbegin\n\t\t\t\tnext_state=data?S0:S9;\n\t\t\tend\n\t\t\tdefault:\n\t\t\tbegin\n\t\t\t\tnext_state=S0;\n\t\t\tend\n\t\tendcase\n\tend\n\talways@(posedge clk)\n\tbegin\n\t\tif(reset)\n\t\t\tstate<=S0;\n\t\telse\n\t\t\tstate<=next_state;\n\tend\n\tassign start_shifting= (state==S9)?1:0;\n\talways@(posedge clk)\n\tbegin\n\t\tif(reset)\n\t\t\tshifted_data<=0;\n\t\telse if(start_shifting)\n\t\t\tshifted_data<=data;\n\tend\nendmodule", "mean_score": 0.49788594245910645, "weighted_mean_score": 0.4989137053489685}
{"task_id": "fsm3", "completion": "\treg\tq;\n\treg\tq_next;\n\talways@(posedge clk or posedge areset) begin\n\t\tif(areset)\n\t\t\tq <= 1'b0;\n\t\telse\n\t\t\tq <= q_next;\n\tend\n\talways@(*) begin\n\t\tq_next = in;\n\t\tif(q == 1'b0)\n\t\t\tq_next = 1'b1;\n\t\telse if(q == 1'b1)\n\t\t\tq_next = 1'b0;\n\tend\n\tassign out = q;\nendmodule", "mean_score": 0.5016340017318726, "weighted_mean_score": 0.5034687519073486}
{"task_id": "mux2to1", "completion": "\tassign out = sel? b : a;\nendmodule", "mean_score": 0.5019704699516296, "weighted_mean_score": 0.49907493591308594}
{"task_id": "lfsr5", "completion": "    always @(posedge clk)\n        begin\n            if(reset)\n                q <= 5'b0;\n            else\n                q <= q + 1'b1;\n                \n        end\nendmodule", "mean_score": 0.5054499506950378, "weighted_mean_score": 0.5065225958824158}
{"task_id": "dff", "completion": "    reg t1, t2;\n    always @(posedge clk)\n        begin\n           t1 <= d;\n            q <= t1;\n        end\nendmodule", "mean_score": 0.5021914839744568, "weighted_mean_score": 0.5037729144096375}
{"task_id": "lfsr32", "completion": "    reg [31:0] temp;\n    always @(posedge clk)\n        begin\n           if(reset)    \n                temp <= 0;\n            else\n                begin\n                    temp <= temp + 1;\n                end\n        end\n    always @(posedge clk)\n        begin\n            q <= temp;\n        end\nendmodule", "mean_score": 0.4964539110660553, "weighted_mean_score": 0.49641382694244385}
{"task_id": "7420", "completion": "assign p1y = ~(p1a & p1b & p1c & p1d);\nassign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule", "mean_score": 0.497503399848938, "weighted_mean_score": 0.4985751211643219}
{"task_id": "2014_q3bfsm", "completion": "\treg [2:0] state, next_state;\n\tparameter S0=0, S1=1, S2=2, S3=3, S4=4;\n\talways@(*)\n\t\tcase(state)\n\t\t\tS0: next_state = x?S1:S0;\n\t\t\tS1: next_state = x?S2:S1;\n\t\t\tS2: next_state = x?S3:S2;\n\t\t\tS3: next_state = x?S4:S3;\n\t\t\tS4: next_state = x?S4:S4;\n\t\t\tdefault: next_state = S0;\n\t\tendcase\n\talways@(posedge clk)\n\t\tif(reset)\n\t\t\tstate <= S0;\n\t\telse\n\t\t\tstate <= next_state;\n\talways@(posedge clk)\n\t\tif(state == S4)\n\t\t\tz <= 1;\n\t\telse\n\t\t\tz <= 0;\nendmodule", "mean_score": 0.4970892071723938, "weighted_mean_score": 0.5002521872520447}
{"task_id": "fsm2s", "completion": "\treg\t[2:0] state;\n\treg out1;\n\talways@(posedge clk) begin\n\t\tif(reset) state <= 0;\n\t\telse case(state)\n\t\t\t3'b000: begin\n\t\t\t\tif(j == 1'b1 && k == 1'b0) state <= 3'b001;\n\t\t\t\telse if(j == 1'b0 && k == 1'b1) state <= 3'b010;\n\t\t\t\telse if(j == 1'b1 && k == 1'b1) state <= 3'b011;\n\t\t\t\telse state <= 3'b000;\n\t\t\tend\n\t\t\t3'b001: begin\n\t\t\t\tif(j == 1'b1 && k == 1'b0) state <= 3'b010;\n\t\t\t\telse if(j == 1'b0 && k == 1'b1) state <= 3'b001;\n\t\t\t\telse if(j == 1'b1 && k == 1'b1) state <= 3'b011;\n\t\t\t\telse state <= 3'b000;\n\t\t\tend\n\t\t\t3'b010: begin\n\t\t\t\tif(j == 1'b1 && k == 1'b0) state <= 3'b011;\n\t\t\t\telse if(j == 1'b0 && k == 1'b1) state <= 3'b010;\n\t\t\t\telse if(j == 1'b1 && k == 1'b1) state <= 3'b001;\n\t\t\t\telse state <= 3'b000;\n\t\t\tend\n\t\t\t3'b011: begin\n\t\t\t\tif(j == 1'b1 && k == 1'b0) state <= 3'b001;\n\t\t\t\telse if(j == 1'b0 && k == 1'b1) state <= 3'b010;\n\t\t\t\telse if(j == 1'b1 && k == 1'b1) state <= 3'b011;\n\t\t\t\telse state <= 3'b000;\n\t\t\tend\n\t\t\tdefault: state <= 3'b000;\n\t\tendcase\n\tend\n\tassign out = out1;\nendmodule", "mean_score": 0.4981429874897003, "weighted_mean_score": 0.4992195665836334}
{"task_id": "m2014_q4b", "completion": "\treg logic q1, q2, q3;\n\talways @(posedge clk)\n\t\tbegin\n\t\t\tq1 <= d | (~ar & q1);\n\t\t\tq2 <= q1 | (~ar & q2);\n\t\t\tq3 <= q2 | (~ar & q3);\n\t\tend\n\tassign q = q3;\nendmodule", "mean_score": 0.4948717951774597, "weighted_mean_score": 0.4991036653518677}
{"task_id": "fadd", "completion": "\tassign sum = a ^ b ^ cin;\n\tassign cout = a&b | b&cin | cin&a;\nendmodule", "mean_score": 0.5027555823326111, "weighted_mean_score": 0.5024645924568176}
{"task_id": "m2014_q4k", "completion": "\treg [3:0] sr;\n\t\n\t// Create a shift register named sr. It shifts in \"in\".\n\talways @(posedge clk) begin\n\t\tif (~resetn)\t\t// Synchronous active-low reset\n\t\t\tsr <= 0;\n\t\telse \n\t\t\tsr <= {sr[2:0], in};\n\tend\n\tassign out = sr[3];\t\t// Output the final bit (sr[3])\n\nendmodule", "mean_score": 0.5061965584754944, "weighted_mean_score": 0.508445143699646}
{"task_id": "mux256to1", "completion": "\tassign out = in[sel];\nendmodule", "mean_score": 0.49163296818733215, "weighted_mean_score": 0.4930378198623657}
{"task_id": "vectorgates", "completion": "\tassign out_or_bitwise = a | b;\n\tassign out_or_logical = a || b;\n\tassign out_not[5:3] = ~b;\n\tassign out_not[2:0] = ~a;\nendmodule", "mean_score": 0.49815550446510315, "weighted_mean_score": 0.500675618648529}
{"task_id": "review2015_fsmshift", "completion": "\treg [3:0] state, next_state;\n\tparameter [3:0] S0=4'b0000, S1=4'b0001, S2=4'b0010, S3=4'b0011, S4=4'b0100, S5=4'b0101, S6=4'b0110, S7=4'b0111, S8=4'b1000, S9=4'b1001;\n\t\n\talways@(*) begin\n\t\tcase(state)\n\t\t\tS0: next_state=s1;\n\t\t\tS1: next_state=s2;\n\t\t\tS2: next_state=s3;\n\t\t\tS3: next_state=s4;\n\t\t\tS4: next_state=s5;\n\t\t\tS5: next_state=s6;\n\t\t\tS6: next_state=s7;\n\t\t\tS7: next_state=s8;\n\t\t\tS8: next_state=s9;\n\t\t\tS9: next_state=s0;\n\t\t\tdefault: next_state=s0;\n\t\tendcase\n\tend\n\t\n\talways@(posedge clk) begin\n\t\tif(reset)\n\t\t\tstate<=S0;\n\t\telse\n\t\t\tstate<=next_state;\n\tend\n\t\n\tassign shift_ena=(state==S9);\n\t\nendmodule", "mean_score": 0.49963048100471497, "weighted_mean_score": 0.4987879693508148}
{"task_id": "count10", "completion": "    always @(posedge clk)\n        begin\n            if(reset)\n                q <= 4'd0;\n            else\n                q <= (q + 4'd1) % 16;\n        end\nendmodule", "mean_score": 0.5074136257171631, "weighted_mean_score": 0.5082517862319946}
{"task_id": "kmap4", "completion": "\treg out1, out2;\n\talways@(*) begin\n\t\tout1 = a | b;\n\t\tout2 = c | d;\n\t\tout = out1 | out2;\n\tend\nendmodule", "mean_score": 0.4970065951347351, "weighted_mean_score": 0.49721264839172363}
{"task_id": "wire", "completion": "\tassign out=~in;\nendmodule", "mean_score": 0.4929618835449219, "weighted_mean_score": 0.4963512122631073}
{"task_id": "ece241_2014_q5b", "completion": "\treg cy;\n\t\n\talways @(posedge clk or posedge areset)\n\t\tif(areset)\n\t\t\tbegin\n\t\t\tz <= 1'b0;\n\t\t\tcy <= 1'b0;\n\t\t\tend\n\t\telse\n\t\t\tbegin\n\t\t\tz <= (x ^ cy);\n\t\t\tcy <= x & cy;\n\t\t\tend\n\t\t\nendmodule", "mean_score": 0.4928571581840515, "weighted_mean_score": 0.4949011206626892}
{"task_id": "gates100", "completion": "\tassign out_and = & in;\n\tassign out_or = | in;\n\tassign out_xor = ^ in;\nendmodule", "mean_score": 0.504536509513855, "weighted_mean_score": 0.5045920610427856}
{"task_id": "dualedge", "completion": "    reg t1, t2;\n    always @(posedge clk)\n        begin\n           t1 <= d;\n            q <= t1;\n        end\nendmodule", "mean_score": 0.5021914839744568, "weighted_mean_score": 0.5037729144096375}
{"task_id": "mux2to1v", "completion": "\tassign out = sel? b : a;\nendmodule", "mean_score": 0.5017977952957153, "weighted_mean_score": 0.5033045411109924}
{"task_id": "edgedetect2", "completion": "\treg\t[7:0]\td;\n\talways@(posedge clk)\n\t\td <= in;\n\talways@(posedge clk)\n\t\tanyedge <= in&(~d)|(in&d)|(~in&~d);\nendmodule", "mean_score": 0.5084444284439087, "weighted_mean_score": 0.5097149610519409}
{"task_id": "ece241_2014_q3", "completion": "\tassign mux_in[0] = c|d;\n\tassign mux_in[1] = 0;\n\tassign mux_in[2] = ~d;\n\tassign mux_in[3] = c&d;\nendmodule", "mean_score": 0.49810728430747986, "weighted_mean_score": 0.4960572123527527}
{"task_id": "circuit10", "completion": "\treg\tq;\n\treg\tstate;\n\talways@(posedge clk) begin\n\t\tif(a==1'b0 && b==1'b0)\n\t\t\tstate <= 1'b0;\n\t\telse if(a==1'b1 && b==1'b0)\n\t\t\tstate <= 1'b1;\n\t\telse\n\t\t\tstate <= 1'b0;\n\t\tq <= a&b;\n\tend\nendmodule", "mean_score": 0.5096573233604431, "weighted_mean_score": 0.5078114867210388}
{"task_id": "fsm_ps2data", "completion": "\treg [3:0] state, next_state;\n\treg [23:0] byte_out;\n\treg [31:0] bytes_done;\n\tassign out_bytes = byte_out;\n\tassign done = bytes_done[23];\n\treg [8:0] data_byte;\n\treg [8:0] data_byte_ff;\n\t// State 0 is the idle state\n\t// State 1 is the state in which we are receiving bytes\n\t// State 2 is the state in which we are receiving bytes and\n\t// sending them to the UART\n\t// State 3 is the state in which we are receiving bytes and\n\t// sending them to the UART, but we are not sure that we have\n\t// received them all.\n\t// State 4 is the state in which we are sending the bytes to\n\t// the UART.\n\talways @(*) begin\n\t\tcase (state)\n\t\t\t0: next_state = (receiving)? 1 : 0;\n\t\t\t1: next_state = receiving? 2 : ((sending)? 1 : 0);\n\t\t\t2: next_state = sending? 2 : 0;\n\t\t\t3: next_state = 0;\n\t\t\t4: next_state = 0;\n\t\t\tdefault: next_state = 0;\n\t\tendcase\n\tend\n\talways @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\tstate <= 0;\n\t\t\tbytes_done <= 0;\n\t\t\tbyte_out <= 0;\n\t\t\tdata_byte <= 0;\n\t\t\tdata_byte_ff <= 0;\n\t\tend\n\t\telse begin\n\t\t\tstate <= next_state;\n\t\t\tbytes_done <= 0;\n\t\t\tbyte_out <= 0;\n\t\t\tdata_byte <= 0;\n\t\t\tdata_byte_ff <= data_byte;\n\t\t\tcase (next_state)\n\t\t\t\t0: begin\n\t\t\t\t\tif (!receiving) begin\n\t\t\t\t\t\tbytes_done <= 0;\n\t\t\t\t\t\tbyte_out <= 0;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t1: begin\n\t\t\t\t\t// Receive the start bit\n\t\t\t\t\tdata_byte_ff <= {data_byte_ff[6:0], in};\n\t\t\t\t\tdata_byte <= data_byte_ff;\n\t\t\t\tend\n\t\t\t\t2: begin\n\t\t\t\t\t// Receive the data\n\t\t\t\t\tdata_byte_ff <= {data_byte_ff[6:0], in};\n\t\t\t\t\tdata_byte <= data_byte_ff;\n\t\t\t\tend\n\t\t\t\t3: begin\n\t\t\t\t\t// Receive the stop bit\n\t\t\t\t\tdata_byte_ff <= {data_byte_ff[6:0], in};\n\t\t\t\t\tdata_byte <= data_byte_ff;\n\t\t\t\t\tif (data_byte == 8'hff) begin\n\t\t\t\t\t\tbyte_out <= data_byte;\n\t\t\t\t\t\tstate <= 0;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t4: begin\n\t\t\t\t\t// Send the byte\n\t\t\t\t\tuart_tx_byte <= data_byte;\n\t\t\t\t\tstate <= 0;\n\t\t\t\tend\n\t\t\tendcase\n\t\tend\n\tend\nendmodule", "mean_score": 0.5014538168907166, "weighted_mean_score": 0.5028014183044434}
{"task_id": "edgedetect", "completion": "\treg [7:0] d_last;\t\n\talways @(posedge clk) begin\n\t\td_last <= in;\t\t\t// Remember the state of the previous cycle\n\t\tpedge <= in & ~d_last;\t// A positive edge occurred if input was 0 and is now 1.\n\tend\nendmodule", "mean_score": 0.5121068954467773, "weighted_mean_score": 0.5140631198883057}
{"task_id": "circuit4", "completion": "\tassign q = ~(a ^ b ^ c ^ d);\nendmodule", "mean_score": 0.4907960295677185, "weighted_mean_score": 0.48781323432922363}
{"task_id": "fsm_ps2", "completion": "\treg [3:0] state, next_state;\n\tparameter [3:0] S0 = 0, S1 = 1, S2 = 2, S3 = 3;\n\t// State transition logic\n\talways @(*)\n\t\tcase(state)\n\t\t\tS0: next_state = (in[3] == 1)? S1 : S0;\n\t\t\tS1: next_state = (in[4] == 1)? S2 : S1;\n\t\t\tS2: next_state = (in[5] == 1)? S3 : S2;\n\t\t\tS3: next_state = (in[6] == 1)? S0 : S3;\n\t\t\tdefault: next_state = S0;\n\t\tendcase\n\t// State flip-flops with asynchronous reset\n\talways @(posedge clk)\n\t\tif(reset)\n\t\t\tstate = S0;\n\t\telse\n\t\t\tstate = next_state;\n\t// Output logic\n\tassign done = (state == S3)? 1 : 0;\nendmodule", "mean_score": 0.4983333349227905, "weighted_mean_score": 0.5013248920440674}
{"task_id": "count15", "completion": "    always @(posedge clk)\n        begin\n            if(reset)\n                q <= 4'd0;\n            else\n                q <= (q + 4'd1) % 16;\n        end\nendmodule", "mean_score": 0.5074136257171631, "weighted_mean_score": 0.5082517862319946}
{"task_id": "fsm3s", "completion": "\treg tem;\n\talways @(posedge clk)\n\t\tif(reset) tem <= 0;\n\t\telse tem <= in;\n\tassign out = tem;\nendmodule", "mean_score": 0.5032680034637451, "weighted_mean_score": 0.508467972278595}
{"task_id": "fsm3onehot", "completion": "\treg [3:0] n_state;\n\t\n\tassign out = in & (state == 4'b101);\n\t\n\talways @(*)\n\t\tcase (state)\n\t\t\t4'b000: next_state = (in)? 4'b001 : 4'b000;\n\t\t\t4'b001: next_state = (in)? 4'b010 : 4'b001;\n\t\t\t4'b010: next_state = (in)? 4'b011 : 4'b010;\n\t\t\t4'b011: next_state = (in)? 4'b100 : 4'b011;\n\t\t\t4'b100: next_state = (in)? 4'b101 : 4'b100;\n\t\t\t4'b101: next_state = (in)? 4'b000 : 4'b101;\n\t\t\tdefault: next_state = state;\n\t\tendcase\n\t\t\nendmodule", "mean_score": 0.49840429425239563, "weighted_mean_score": 0.49786895513534546}
{"task_id": "m2014_q4a", "completion": "\tassign q = d & ena;\nendmodule", "mean_score": 0.4905472993850708, "weighted_mean_score": 0.4889470636844635}
{"task_id": "edgecapture", "completion": "    reg [31:0] last;\n    always @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\tout = 0;\n\t\t\tlast = 0;\n\t\tend\n        else begin\n            last = in;\n            if (last < out) begin\n                out = out;\n            end\n            if (last > out) begin\n                out = last;\n            end\n        end\n    end\nendmodule", "mean_score": 0.49628883600234985, "weighted_mean_score": 0.4938995838165283}
{"task_id": "always_nolatches", "completion": "\talways @(*) begin\n\t\tup = 1'b0; down = 1'b0; left = 1'b0; right = 1'b0;\n\t\tcase(scancode)\n\t\t\t16'he06b: left = 1'b1;\n\t\t\t16'he072: down = 1'b1;\n\t\t\t16'he074: right = 1'b1;\n\t\t\t16'he075: up = 1'b1;\n\t\t\tdefault: up = 1'b0;\n\t\tendcase\n\tend\nendmodule", "mean_score": 0.5117021799087524, "weighted_mean_score": 0.5127125382423401}
{"task_id": "m2014_q4h", "completion": "\tassign out=~in;\nendmodule", "mean_score": 0.4929618835449219, "weighted_mean_score": 0.4963512122631073}
{"task_id": "popcount3", "completion": "\tassign out = {in[2], in[1]};\nendmodule", "mean_score": 0.5087962746620178, "weighted_mean_score": 0.511996328830719}
{"task_id": "vectorr", "completion": "\tassign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule", "mean_score": 0.500617265701294, "weighted_mean_score": 0.5054064393043518}
{"task_id": "dff8r", "completion": "\talways @(posedge clk)\n\t\tbegin\n\t\t\tif(reset)\n\t\t\t\tq <= 0;\n\t\t\telse\n\t\t\t\tq <= d;\n\t\tend\nendmodule", "mean_score": 0.5053235292434692, "weighted_mean_score": 0.5010302662849426}
{"task_id": "2013_q2bfsm", "completion": "\treg\t[2:0] state;\n\treg\t[2:0] next_state;\n\tparameter A=3'b000, B=3'b001, C=3'b010, D=3'b011, E=3'b100, F=3'b101, G=3'b110;\n\talways@(*) begin\n\t\tcase({state, x, y})\n\t\t\t{A, 1'b0, 1'b0}: next_state = A;\n\t\t\t{A, 1'b0, 1'b1}: next_state = B;\n\t\t\t{A, 1'b1, 1'b0}: next_state = C;\n\t\t\t{A, 1'b1, 1'b1}: next_state = D;\n\t\t\t{B, 1'b0, 1'b0}: next_state = E;\n\t\t\t{B, 1'b0, 1'b1}: next_state = F;\n\t\t\t{B, 1'b1, 1'b0}: next_state = G;\n\t\t\t{B, 1'b1, 1'b1}: next_state = D;\n\t\t\t{C, 1'b0, 1'b0}: next_state = E;\n\t\t\t{C, 1'b0, 1'b1}: next_state = F;\n\t\t\t{C, 1'b1, 1'b0}: next_state = G;\n\t\t\t{C, 1'b1, 1'b1}: next_state = D;\n\t\t\t{D, 1'b0, 1'b0}: next_state = C;\n\t\t\t{D, 1'b0, 1'b1}: next_state = F;\n\t\t\t{D, 1'b1, 1'b0}: next_state = G;\n\t\t\t{D, 1'b1, 1'b1}: next_state = C;\n\t\t\t{E, 1'b0, 1'b0}: next_state = E;\n\t\t\t{E, 1'b0, 1'b1}: next_state = F;\n\t\t\t{E, 1'b1, 1'b0}: next_state = G;\n\t\t\t{E, 1'b1, 1'b1}: next_state = D;\n\t\t\t{F, 1'b0, 1'b0}: next_state = E;\n\t\t\t{F, 1'b0, 1'b1}: next_state = F;\n\t\t\t{F, 1'b1, 1'b0}: next_state = G;\n\t\t\t{F, 1'b1, 1'b1}: next_state = D;\n\t\t\t{G, 1'b0, 1'b0}: next_state = C;\n\t\t\t{G, 1'b0, 1'b1}: next_state = F;\n\t\t\t{G, 1'b1, 1'b0}: next_state = E;\n\t\t\t{G, 1'b1, 1'b1}: next_state = D;\n\t\tendcase\n\tend\n\talways@(posedge clk) begin\n\t\tif(~resetn)\n\t\t\tstate <= A;\n\t\telse\n\t\t\tstate <= next_state;\n\tend\n\tassign f = (state == D)?1:0;\n\tassign g = (state == C)?1:0;\nendmodule", "mean_score": 0.5038557648658752, "weighted_mean_score": 0.5058873891830444}
{"task_id": "ece241_2014_q1c", "completion": "\tassign s = a ^ b;\n\tassign overflow = (a[7] == b[7] && a[7]!= s[7])?1:0;\nendmodule", "mean_score": 0.5026800632476807, "weighted_mean_score": 0.4980722963809967}
{"task_id": "ece241_2013_q2", "completion": "\tassign out_sop = (c&d) | (~a&~b&c);\n\tassign out_pos = out_sop;\nendmodule", "mean_score": 0.4808219075202942, "weighted_mean_score": 0.4828186333179474}
{"task_id": "m2014_q6c", "completion": "\treg\t[6:1] NS;\n\tassign Y2 = NS[2];\n\tassign Y4 = NS[4];\n\talways@(*)\n\t\tcase({y, w})\n\t\t\t7'b000_0001:\tNS = 7'b000_0010;\n\t\t\t7'b000_001?:\tNS = 7'b000_0100;\n\t\t\t7'b010_011:\tNS = 7'b000_1000;\n\t\t\t7'b011_111:\tNS = 7'b010_0000;\n\t\t\t7'b100_111:\tNS = 7'b000_0000;\n\t\t\t7'b000_01??:\tNS = 7'b000_1000;\n\t\t\t7'b000_1???:\tNS = 7'b000_2000;\n\t\t\t7'b000_11??:\tNS = 7'b000_3000;\n\t\t\t7'b000_111?:\tNS = 7'b000_4000;\n\t\t\t7'b000_11??:\tNS = 7'b000_5000;\n\t\t\t7'b000_111?:\tNS = 7'b000_6000;\n\t\t\t7'b000_1111:\tNS = 7'b000_7000;\n\t\t\t7'b000_111?:\tNS = 7'b000_8000;\n\t\t\t7'b000_1111?:\tNS = 7'b000_9000;\n\t\t\t7'b000_1111?:\tNS = 7'b000_9000;\n\t\t\t7'b000_1111?:\tNS = 7'b000_9000;\n\t\t\t7'b111_1111?:\tNS = 7'b000_9000;\n\t\t\tdefault:\t\tNS = 7'b000_0000;\n\t\tendcase\nendmodule", "mean_score": 0.4970491826534271, "weighted_mean_score": 0.4971662759780884}
{"task_id": "reduction", "completion": "\tassign parity = ^ in[7:0];\nendmodule", "mean_score": 0.49873530864715576, "weighted_mean_score": 0.5006186962127686}
{"task_id": "gates", "completion": "\tassign out_and = a && b;\n\tassign out_or = a || b;\n\tassign out_xor = a ^ b;\n\tassign out_nand = ~(a && b);\n\tassign out_nor = ~(a || b);\n\tassign out_xnor=~(a ^ b);\n\tassign out_anotb= a && (~b);\nendmodule", "mean_score": 0.49757710099220276, "weighted_mean_score": 0.4973554015159607}
{"task_id": "wire_decl", "completion": "\tassign out = ~(a^b)&(~c)&d | ~(a^b)&c&~d | a&~c&~d;\n\tassign out_n = ~(a^b)&(~c)&d | ~(a^b)&c&~d | ~a&c&d;\nendmodule", "mean_score": 0.5001360774040222, "weighted_mean_score": 0.4950346052646637}
{"task_id": "7458", "completion": "\tassign p1y = ~(p1a && p1b && p1c && p1d && p1e && p1f);\n\tassign p2y = ~(p2a && p2b && p2c && p2d);\nendmodule", "mean_score": 0.5041820406913757, "weighted_mean_score": 0.5047476291656494}
{"task_id": "2012_q2fsm", "completion": "\treg\t[1:0]\tstate, next_state;\n\tparameter\t[1:0]\tA = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\t// State transition logic\n\talways@(*) begin\n\t\tcase({state, w})\n\t\t\t{A, 1'b0}:\tnext_state = A;\n\t\t\t{A, 1'b1}:\tnext_state = B;\n\t\t\t{B, 1'b0}:\tnext_state = C;\n\t\t\t{B, 1'b1}:\tnext_state = B;\n\t\t\t{C, 1'b0}:\tnext_state = A;\n\t\t\t{C, 1'b1}:\tnext_state = D;\n\t\t\t{D, 1'b0}:\tnext_state = C;\n\t\t\t{D, 1'b1}:\tnext_state = B;\n\t\tendcase\n\tend\n\t// State flip-flops with asynchronous reset\n\talways@(posedge clk) begin\n\t\tif(reset)\n\t\t\tstate <= A;\n\t\telse\n\t\t\tstate <= next_state;\n\tend\n\t// Output logic\n\tassign z = (state == D);\nendmodule", "mean_score": 0.5033016800880432, "weighted_mean_score": 0.5048966407775879}
{"task_id": "count_clock", "completion": "\treg pm_count;\n\treg [7:0] sec_count;\n\treg [3:0] a_sec;\n\treg [3:0] min_count;\n\treg [3:0] min_alarm;\n\treg [3:0] hour_count;\n\treg [3:0] hour_alarm;\n\treg [7:0] year_count;\n\treg [3:0] year_alarm;\n\treg [7:0] month_count;\n\treg [3:0] month_alarm;\n\treg [7:0] day_count;\n\treg [3:0] day_alarm;\n\treg [7:0] hour_count_d1;\n\treg [3:0] hour_count_d2;\n\treg btn_pressed;\n\treg btn_pressed_d1;\n\treg btn_pressed_d2;\n\treg btn_pressed_d3;\n\treg btn_pressed_d4;\n\treg btn_pressed_d5;\n\treg btn_pressed_d6;\n\treg btn_pressed_d7;\n\treg btn_pressed_d8;\n\treg btn_pressed_d9;\n\treg btn_pressed_d10;\n\treg btn_pressed_d11;\n\treg btn_pressed_d12;\n\treg [7:0] sw_count;\n\treg sw_count_d1;\n\treg sw_count_d2;\n\treg sw_count_d3;\n\treg sw_count_d4;\n\treg sw_count_d5;\n\treg sw_count_d6;\n\treg sw_count_d7;\n\treg sw_count_d8;\n\treg sw_count_d9;\n\treg sw_count_d10;\n\treg sw_count_d11;\n\treg sw_count_d12;\n\treg [7:0] year_count_d1;\n\treg [3:0] year_count_d2;\n\treg [7:0] year_count_d3;\n\treg [3:0] year_count_d4;\n\treg [7:0] year_count_d5;\n\treg [3:0] year_count_d6;\n\treg [7:0] year_count_d7;\n\treg [3:0] year_count_d8;\n\treg [7:0] year_count_d9;\n\treg [3:0] year_count_d10;\n\treg [7:0] year_count_d11;\n\treg [3:0] year_count_d12;\n\treg btn_pressed_c1;\n\treg btn_pressed_c2;\n\treg btn_pressed_c3;\n\treg btn_pressed_c4;\n\treg btn_pressed_c5;\n\treg btn_pressed_c6;\n\treg btn_pressed_c7;\n\treg btn_pressed_c8;\n\treg btn_pressed_c9;\n\treg btn_pressed_c10;\n\treg btn_pressed_c11;\n\treg btn_pressed_c12;\n\treg [7:0] sw_count_c1;\n\treg [3:0] sw_count_c2;\n\treg [7:0] sw_count_c3;\n\treg [3:0] sw_count_c4;\n\treg [7:0] sw_count_c5;\n\treg [3:0] sw_count_c6;\n\treg [7:0] sw_count_c7;\n\treg [3:0] sw_count_c8;\n\treg [7:0] sw_count_c9;\n\treg [3:0] sw_count_c10;\n\treg [7:0] sw_count_c11;\n\treg [3:0] sw_count_c12;\n\treg [7:0] year_count_c1;\n\treg [3:0] year_count_c2;\n\treg [7:0] year_count_c3;\n\treg [3:0] year_count_c4;\n\treg [7:0] year_count_c5;endmodule", "mean_score": 0.49716314673423767, "weighted_mean_score": 0.49427172541618347}
{"task_id": "2014_q4a", "completion": "\treg Q_BAR;\n\talways @(posedge clk)\n\t\tif(R)\n\t\t\tQ = 0;\n\t\telse if(E)\n\t\t\tQ = w;\n\t\telse if(L)\n\t\t\tQ = Q_BAR;\nendmodule", "mean_score": 0.5017937421798706, "weighted_mean_score": 0.49943625926971436}
{"task_id": "rule90", "completion": "\treg [3:0] count;\n\treg [3:0] count2;\n\treg [7:0] data2 [0:7];\n\treg [511:0] data3 [0:31];\n\treg [511:0] temp;\n\treg [3:0] i;\n\treg [3:0] j;\n\treg [7:0] k;\n\treg [3:0] line;\n\treg [511:0] out2;\n\treg [3:0] l;\n\treg [3:0] count3;\n\treg [7:0] data4 [0:7];\n\treg [7:0] data5 [0:31];\n\treg [511:0] out3;\n\treg [3:0] count4;\n\treg start;\n\treg [7:0] data6 [0:7];\n\treg [7:0] data7 [0:31];\n\treg [511:0] out4;\n\treg [7:0] data8 [0:7];\n\treg [7:0] data9 [0:31];\n\treg [511:0] out5;\n\treg [7:0] data10 [0:7];\n\treg [7:0] data11 [0:31];\n\treg start2;\n\treg [3:0] l2;\n\treg [7:0] data12 [0:7];\n\treg [7:0] data13 [0:31];\n\treg [511:0] out6;\n\treg [7:0] data14 [0:7];\n\treg [7:0] data15 [0:31];\n\treg [511:0] out7;\n\treg [7:0] data16 [0:7];\n\treg [7:0] data17 [0:31];\n\treg [511:0] out8;\n\treg [7:0] data18 [0:7];\n\treg [7:0] data19 [0:31];\n\treg [511:0] out9;\n\treg [7:0] data20 [0:7];\n\treg [7:0] data21 [0:31];\n\treg [511:0] out10;\n\treg [7:0] data22 [0:7];\n\treg [7:0] data23 [0:31];\n\treg [511:0] out11;\n\treg [7:0] data24 [0:7];\n\treg [7:0] data25 [0:31];\n\treg [511:0] out12;\n\treg [7:0] data26 [0:7];\n\treg [7:0] data27 [0:31];\n\treg [511:0] out13;\n\treg [7:0] data28 [0:7];\n\treg [7:0] data29 [0:31];\n\treg [511:0] out14;\n\treg [7:0] data30 [0:7];\n\treg [7:0] data31 [0:31];\n\treg [7:0] data32 [0:7];\n\treg [7:0] data33 [0:31];\n\treg [511:0] out15;\n\treg [7:0] data34 [0:7];\n\treg [7:0] data35 [0:31];\n\treg [511:0] out16;\n\treg [7:0] data36 [0:7];\n\treg [7:0] data37 [0:31];\n\treg [511:0] out17;\n\treg [7:0] data38 [0:7];\n\treg [7:0] data39 [0:31];\n\treg [511:0] out18;\n\treg [7:0] data40 [0:7];\n\treg [7:0] data41 [0:31];\n\treg [511:0] out19;\n\treg [7:0] data42 [0:7];\n\treg [7:0] data43 [0:31];\n\treg [511:0] out20;\n\treg [7:0] data44 [0:7];\n\treg [7:0] data45 [0:31];\n\treg [511:0] out21;\n\treg [7:0] data46 [0:7];\n\treg [7endmodule", "mean_score": 0.4986947476863861, "weighted_mean_score": 0.4980233311653137}
{"task_id": "lemmings2", "completion": "\treg [2:0] state, next_state;\n\tparameter LEFT = 3'b000, RIGHT = 3'b001, FLEFT = 3'b010, FRIGHT = 3'b011, LEFTDIG = 3'b100, RIGHTDIG = 3'b101;\n\talways @(*)\n\t\tcase (state)\n\t\t\tLEFT: next_state = ground? (bump_left? RIGHT : LEFT) : (bump_left? LEFTDIG : LEFT);\n\t\t\tRIGHT: next_state = ground? (bump_right? LEFT : RIGHT) : (bump_right? RIGHTDIG : RIGHT);\n\t\t\tLEFTDIG: next_state = ground? LEFTDIG : state;\n\t\t\tRIGHTDIG: next_state = ground? RIGHTDIG : state;\n\t\t\tdefault: next_state = state;\n\t\tendcase\n\talways @(posedge clk or posedge areset)\n\t\tif(areset)\n\t\t\tstate <= LEFT;\n\t\telse\n\t\t\tstate <= next_state;\n\tassign walk_left = (state == LEFT) || (state == LEFTDIG);\n\tassign walk_right = (state == RIGHT) || (state == RIGHTDIG);\n\tassign aaah = (state == FRIGHT) || (state == LEFTDIG) || (state == RIGHTDIG);\nendmodule", "mean_score": 0.4946514070034027, "weighted_mean_score": 0.49368932843208313}
{"task_id": "ece241_2014_q5a", "completion": "\treg cy;\n\t\n\talways @(posedge clk or posedge areset)\n\t\tif(areset)\n\t\t\tbegin\n\t\t\tz <= 1'b0;\n\t\t\tcy <= 1'b0;\n\t\t\tend\n\t\telse\n\t\t\tbegin\n\t\t\tz <= (x ^ cy);\n\t\t\tcy <= x & cy;\n\t\t\tend\n\t\t\nendmodule", "mean_score": 0.4928571581840515, "weighted_mean_score": 0.4949011206626892}
{"task_id": "vector2", "completion": "\tassign out = { {24{in[31]}}, in[31:24] };\nendmodule", "mean_score": 0.5041984915733337, "weighted_mean_score": 0.5073248147964478}
{"task_id": "m2014_q6b", "completion": "    always @(*)\n\t\tcase({y, w})\n\t\t\t4'b0000 : Y2 = 1'b1;\n\t\t\t4'b0001 : Y2 = 1'b1;\n\t\t\t4'b0010 : Y2 = 1'b0;\n\t\t\t4'b0011 : Y2 = 1'b1;\n\t\t\t4'b0100 : Y2 = 1'b0;\n\t\t\t4'b0101 : Y2 = 1'b1;\n\t\t\t4'b0110 : Y2 = 1'b0;\n\t\t\t4'b0111 : Y2 = 1'b1;\n\t\t\t4'b1000 : Y2 = 1'b0;\n\t\t\t4'b1001 : Y2 = 1'b1;\n\t\tendcase\nendmodule", "mean_score": 0.49983662366867065, "weighted_mean_score": 0.4980386793613434}
{"task_id": "kmap1", "completion": "assign out = a | b | c;\nendmodule", "mean_score": 0.5012781023979187, "weighted_mean_score": 0.49979090690612793}
{"task_id": "circuit2", "completion": "\tassign q = ~(a ^ b ^ c ^ d);\nendmodule", "mean_score": 0.4907960295677185, "weighted_mean_score": 0.48781323432922363}
{"task_id": "always_if", "completion": "\tassign out_assign = b & sel_b1 & sel_b2;\n\talways @(*) begin\n\t\tout_always = b & sel_b1 & sel_b2;\n\tend\nendmodule", "mean_score": 0.504878044128418, "weighted_mean_score": 0.5048550367355347}
{"task_id": "ece241_2013_q12", "completion": "\treg [2:0] state;\n\treg [2:0] next_state;\n\tparameter A2=2'b00, A3=2'b01, A4=2'b10, DONE=2'b11;\n\talways@(*)\n\t\tcase(state)\n\t\t\tA2: next_state = S?A3:A2;\n\t\t\tA3: next_state = S?A4:A3;\n\t\t\tA4: next_state = (enable)?DONE:A4;\n\t\t\tDONE: next_state = DONE;\n\t\t\tdefault: next_state = state;\n\t\tendcase\n\talways@(posedge clk)\n\t\tif(state == DONE) Z = 1;\n\t\telse if(state == A4) Z = 0;\n\talways@(posedge clk)\n\t\tif(state == DONE) state <= DONE;\n\t\telse if(state == A4) state <= A4;\n\t\telse if(state == A3) state <= A3;\n\t\telse if(state == A2) state <= A2;\n\t\telse if(state == A1) state <= A1;\n\t\telse if(state == A0) state <= A0;\n\t\telse if(state == DONE) state <= DONE;\nendmodule", "mean_score": 0.5056208968162537, "weighted_mean_score": 0.5079663991928101}
{"task_id": "shift4", "completion": "    \n    always @(posedge clk, posedge areset)\n        begin\n            if(areset)\n                q <= 4'b0;\n            else if(load)\n                q <= data;\n            else if(ena)\n            \tq[3:0] <= {1'b0, q[3:1]};\n        end\nendmodule", "mean_score": 0.4951465427875519, "weighted_mean_score": 0.49587762355804443}
{"task_id": "shift18", "completion": "\talways @(posedge clk)\n\t\tbegin\n\t\t\tif(load)\n\t\t\t\tq <= data;\n\t\t\telse if(ena)\n\t\t\tbegin\n\t\t\t\tq[63:0] <= {64{1'b0}};\n\t\t\t\tq[63:amount] <= q[63:amount] + 1'b1;\n\t\t\tend\n\t\tend\nendmodule", "mean_score": 0.49592041969299316, "weighted_mean_score": 0.49652668833732605}
{"task_id": "m2014_q4c", "completion": "\treg logic q1, q2, q3;\n\talways @(posedge clk)\n\t\tq1 <= d;\n\talways @(posedge clk)\n\t\tq2 <= r;\n\talways @(posedge clk)\n\t\tq3 <= q1;\n\tassign q = q3;\nendmodule", "mean_score": 0.49670782685279846, "weighted_mean_score": 0.5043821930885315}
{"task_id": "ece241_2013_q8", "completion": "\treg cy;\n\n\talways @(posedge clk or negedge aresetn)\n\t\tif(~aresetn)\n\t\t\tz <= 1'b0;\n\t\telse\n\t\t\tz <= (cy == 2'd1);\n\t\n\talways @(posedge clk or negedge aresetn)\n\t\tif(~aresetn)\n\t\t\tcy <= 1'b0;\n\t\telse\n\t\t\tcy <= cy + 1'b1;\nendmodule", "mean_score": 0.4929196834564209, "weighted_mean_score": 0.49449071288108826}
{"task_id": "fsm1s", "completion": "\treg tem;\n\talways @(posedge clk)\n\t\tif(reset) tem <= 0;\n\t\telse tem <= in;\n\tassign out = tem;\nendmodule", "mean_score": 0.5032680034637451, "weighted_mean_score": 0.508467972278595}
{"task_id": "m2014_q4i", "completion": "assign out=1'b0;\nendmodule", "mean_score": 0.5059880018234253, "weighted_mean_score": 0.5038198828697205}
{"task_id": "countbcd", "completion": "\treg [3:0] state;\n\treg [3:0] next_state;\n\tparameter A = 4'd0, B = 4'd1, C = 4'd2, D = 4'd3;\n\t// State transition logic\n\talways @(*)\n\t\tcase(state)\n\t\t\tA: next_state = (q == 16'h8000)? B : A;\n\t\t\tB: next_state = (q == 16'h4000)? C : B;\n\t\t\tC: next_state = (q == 16'h2000)? D : C;\n\t\t\tD: next_state = (q == 16'h1000)? C : D;\n\t\t\tdefault: next_state = state;\n\t\tendcase\n\t// State flip-flops with asynchronous reset\n\talways @(posedge clk)\n\t\tif(reset)\n\t\t\tstate = A;\n\t\telse\n\t\t\tstate = next_state;\n\t// Output logic\n\tassign ena = {q == 16'h7ff0, q == 16'h8000, q == 16'hffff};\nendmodule", "mean_score": 0.4969286322593689, "weighted_mean_score": 0.49443352222442627}
{"task_id": "popcount255", "completion": "\treg [7:0] last;\n\t\n\talways @(*) begin\n\t\tlast = in[254:255];\n\t\tout = 0;\n\t\t\n\t\tfor (int i = 0; i < 255; i++)\n\t\t\tif (in[i]!== last[i]) begin\n\t\t\t\tout = i;\n\t\t\t\tlast = in[i];\n\t\t\tend\n\tend\nendmodule", "mean_score": 0.5082508325576782, "weighted_mean_score": 0.5079621076583862}
{"task_id": "2014_q3c", "completion": "\treg [2:0] count;\n\talways @(posedge clk)\n\tbegin\n\t\tcount <= count + 1;\n\t\tif (count == 3)\n\t\t\tbegin\n\t\t\t\tcount <= 0;\n\t\t\t\tY0 <= x | y;\n\t\t\tend\n\t\telse if (count == 4)\n\t\t\tbegin\n\t\t\t\tcount <= 0;\n\t\t\t\tz <= ~x;\n\t\t\tend\n\tend\nendmodule", "mean_score": 0.4980480670928955, "weighted_mean_score": 0.5041354298591614}
{"task_id": "thermostat", "completion": "assign heater = mode  & too_cold;\nassign aircon =!mode & too_hot;\n//assign fan    = heater | aircon | fan_on;   //\u867d\u7136\u5199\u8fd9\u53e5\u8bdd\u4e5f\u662fsuccess\uff0c\u4f46\u76f4\u63a5\u62ff\u8f93\u51fa\u6765\u5224\u65ad\u80af\u5b9a\u662f\u6709\u95ee\u9898\u7684\nassign fan    = (mode & too_cold) | (!mode & too_hot) | fan_on;\nendmodule", "mean_score": 0.4971533417701721, "weighted_mean_score": 0.498645544052124}
{"task_id": "2012_q2b", "completion": "\tassign Y1 = y[0]&w;\n\tassign Y3 = y[1]&(~w) | y[2]&(~w) | y[4]&(~w) | y[5]&(~w);\nendmodule", "mean_score": 0.5029712319374084, "weighted_mean_score": 0.5048179626464844}
